/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 29.06.2025 17:58:56

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 44896, -46646, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00011027696018572897, 0.0001056110777426511, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 45,-51,-65,102,-68,-4,-46,59,127,-40,-36,-40,-34,63,-32,52,101,-111,-16,-94,123,76,83,-82,-87,-99,-17,84,14,-72,-10,108, 
  /* [1][0][][] */ 64,80,80,-67,-80,82,-8,15,-43,-13,36,116,122,46,39,-2,-43,0,-73,-96,-85,39,33,120,92,76,-54,-7,108,-113,-127,-48, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0034758977126330137, 0.0033288304693996906, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 164, 105, 123, -327, -325, 123, -435, 129, -209, -390, 109, 80, 127, 159, 18, -209, -139, -1004, 70, -339, -184, 109, 10, 159, 124, 36, -140, -95, -136, -223, 1128, 1049, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.833783557638526e-05, 4.9827980546979234e-05, 4.5657910959562287e-05, 4.252342478139326e-05, 3.8485410186694935e-05, 4.4974520278628916e-05, 4.0059931052383035e-05, 3.9226822991622612e-05, 4.4950491428608075e-05, 4.1619005060056224e-05, 4.0629114664625376e-05, 4.3055122660007328e-05, 3.9108712371671572e-05, 4.0392918890574947e-05, 4.4518947106553242e-05, 5.0989743613172323e-05, 4.587522562360391e-05, 5.9716363466577604e-05, 3.7899077142355964e-05, 3.9432012272300199e-05, 4.2768006096594036e-05, 3.705692506628111e-05, 4.5829234295524657e-05, 4.7826877562329173e-05, 4.7591151087544858e-05, 4.4782849727198482e-05, 4.3471696699270979e-05, 4.5164018956711516e-05, 4.3967578676529229e-05, 4.3808009650092572e-05, 4.7050289140315726e-05, 5.0115573685616255e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-66,117,16,103,-17,-100,-99,74,-103,-114,11,67,14,-29,52,-47,-44,-65,-54,-67,-102,7,122,-119,12,93,-49,123,5,-22,-86,91,-63,-92,74,-113,-83,-91,41,60,-120,-95,109,53,-117,123,-20,-24,-66,-35,82,-76,-63,-97,120,24,80,127,-124,-78,94,-62,49,-4,20,82,100,64,115,98,-121,114,-102,49,88,-119,21,-57,40,62,18,104,-44,-62,-67,-88,96,29,122,-7,-114,20,75,26,21, 
  /* [1][0][][] */ -42,19,-52,4,-31,63,24,14,72,-82,-85,98,61,-17,29,52,100,-39,33,102,-34,3,33,29,29,16,-24,89,14,10,80,-54,52,89,-1,28,48,53,-6,-42,-72,-22,-12,-76,-28,27,-16,-42,-46,-75,92,25,12,61,-62,-34,17,90,52,61,-45,101,-60,-66,-44,32,69,34,92,34,21,10,-86,80,-35,36,64,-29,-28,66,-61,67,-37,-127,26,79,-53,-59,64,66,80,27,73,77,19,-4, 
  /* [2][0][][] */ 47,24,-47,91,-18,-53,71,91,-82,79,-31,116,88,-8,83,-102,-38,-30,35,54,-80,-5,103,26,-21,73,103,10,-55,78,69,85,-58,-15,-76,-90,-71,87,100,-12,-127,-97,20,-1,-74,101,-13,-66,59,28,79,-108,-38,48,22,24,-68,93,-53,-3,-12,61,-38,61,86,45,50,79,-77,72,15,-62,38,-62,34,22,-51,-13,11,16,39,-86,-4,-71,4,-104,-14,-34,79,100,-18,13,-34,-70,-46,-60, 
  /* [3][0][][] */ 66,-4,32,-27,-73,45,-112,32,46,17,57,-1,84,88,65,0,95,90,-56,9,106,-89,-67,-114,-18,-113,-83,98,38,-100,78,2,-59,-40,-21,-18,-94,-28,34,41,-24,-78,-96,-5,67,23,-52,-85,71,-84,38,21,86,22,82,-101,-116,-118,-117,-62,-98,29,-40,66,49,-37,-64,-36,-37,-71,-1,92,14,-100,47,-53,27,127,88,-64,-91,-119,32,100,23,43,-47,-118,-84,41,-5,-110,86,-96,-90,37, 
  /* [4][0][][] */ 46,107,-8,48,-36,-37,32,12,62,86,-13,56,22,-45,-20,-75,-37,-8,-72,13,108,-102,89,21,-3,-11,60,-68,-58,31,-81,-64,67,113,9,-114,-54,-7,-126,45,-46,-46,-83,-100,26,105,29,57,39,-51,-21,-43,-98,45,-97,14,33,-107,32,10,5,-86,-41,-75,-55,50,-3,-46,21,-116,-107,-94,-65,26,100,52,61,29,-13,-65,-1,-56,-105,23,-6,79,92,2,-127,-75,41,39,21,100,-99,-16, 
  /* [5][0][][] */ 92,-91,76,81,36,-107,17,57,101,-103,-2,-51,28,93,41,31,66,48,-62,93,33,54,19,-18,-93,-56,-5,-81,49,33,12,-91,-32,4,-57,20,-98,-30,47,30,-103,-75,44,91,-31,17,39,-45,-127,89,20,3,38,6,33,-13,90,52,-47,-45,31,-55,27,-67,-25,93,-18,26,73,12,100,-62,-37,74,-21,-68,4,-36,16,81,101,34,30,63,-71,56,-2,28,61,-90,110,87,-12,24,60,-74, 
  /* [6][0][][] */ 14,-48,107,71,-92,-56,-8,62,-19,-89,2,-94,81,50,110,-124,37,-1,-4,97,-85,-126,105,53,-67,-89,-15,-65,-34,-121,42,-81,-98,-127,-52,-114,-16,35,-115,77,86,55,17,-21,-120,104,-95,-51,-79,14,-34,-69,54,-57,91,-33,6,-13,-73,109,-102,-4,65,-79,-58,63,96,-55,73,-11,-112,-10,51,-75,-97,-46,-87,-109,-63,-36,28,-34,38,-25,-77,-94,-45,-100,80,90,91,11,-58,-71,71,-34, 
  /* [7][0][][] */ 124,66,-34,-41,-76,113,-25,5,127,5,-99,16,61,-88,54,78,55,11,3,120,61,42,-4,89,-65,108,48,61,-78,116,-23,35,27,26,73,108,-107,94,-6,-27,81,-97,95,74,51,-2,109,-115,25,-60,-114,-87,-25,82,21,34,117,-90,4,-67,10,-5,80,-119,-72,-58,77,25,-109,26,73,90,92,31,68,61,-70,58,-97,53,99,-40,-15,-105,94,26,-113,94,87,10,94,70,-54,-43,-6,-63, 
  /* [8][0][][] */ 8,38,-50,-91,54,26,-62,-28,0,34,38,75,-6,-47,-87,-68,-75,92,-63,7,20,-31,68,94,-107,83,29,66,-71,8,-82,106,83,-32,35,-8,96,-3,-27,52,98,127,-110,-113,-12,-23,-31,91,49,-76,-58,20,-65,3,-33,-107,51,88,-91,102,94,31,40,96,-37,-44,-28,90,-88,33,20,-6,60,56,1,19,-43,88,67,58,24,79,-110,-38,19,53,62,-40,31,-38,-83,85,-77,-95,-42,54, 
  /* [9][0][][] */ -5,2,103,36,74,-112,-53,-124,33,43,-15,45,-34,-85,-109,-34,-4,-3,-106,-77,-5,89,-115,-109,102,-15,-22,16,-20,-70,-91,91,55,-6,18,-27,-84,7,-43,-52,46,-66,44,-99,74,12,-111,43,69,-17,-90,-48,65,-73,-76,93,80,-68,-22,-4,-95,96,72,-81,-94,-2,92,38,-49,89,99,-96,-2,71,-113,-102,-81,-127,-48,94,24,21,90,45,-51,-99,29,-24,90,23,-39,100,101,-9,59,-43, 
  /* [10][0][][] */ -55,71,101,-59,-15,105,100,37,46,33,24,-53,110,88,-22,7,-18,73,-96,-56,-12,39,60,-60,27,56,-104,-112,-41,88,-96,-81,89,104,127,80,-34,8,-27,50,-60,82,-103,-34,-98,-65,8,-58,-33,-6,35,-14,66,12,-62,-26,-110,-5,33,-53,0,89,103,40,123,-72,-89,-22,31,-6,-86,-65,96,71,-78,104,-21,75,73,29,84,-2,62,65,-99,47,105,-34,34,5,-1,-61,-46,-44,-51,-68, 
  /* [11][0][][] */ 111,-9,-5,106,114,41,43,39,118,90,-70,127,4,-75,38,-72,-37,-108,64,45,38,80,29,-90,-104,-89,-4,68,83,3,26,-19,-80,-65,57,48,-52,73,-19,-37,-46,73,-61,8,-40,-59,-74,-85,33,93,104,31,-82,-94,18,34,-70,-40,-20,-95,-74,94,69,7,34,89,-46,28,91,70,-70,-66,48,104,-90,47,-71,44,-33,89,-94,-26,-62,-69,45,-100,21,-37,-94,-14,14,-84,-75,-28,-70,-37, 
  /* [12][0][][] */ 20,59,-49,9,92,5,-44,45,-71,64,-14,29,-37,19,62,-85,-90,-41,-45,-77,35,-1,22,110,-73,-49,117,-102,104,22,-39,120,-86,-69,-39,22,4,-74,-11,58,94,8,-106,-37,-22,-92,-30,125,-80,-126,-82,81,42,-9,-83,98,-28,-51,59,60,65,127,-12,56,121,39,-40,123,67,119,52,78,96,125,-11,-9,-42,46,-113,-90,-53,105,55,-24,-34,12,61,112,-98,-115,100,53,112,-14,25,79, 
  /* [13][0][][] */ 116,-68,111,104,95,112,76,72,81,-102,13,-19,99,78,77,-48,-109,-77,-66,34,75,-19,122,-43,-64,43,16,23,-82,-82,82,38,44,108,-14,44,-79,-25,32,79,-85,50,-45,17,-44,27,5,-26,4,99,-36,-127,-96,23,105,-75,-52,36,-20,-82,-22,124,-82,14,-49,-60,-85,90,-30,-2,105,1,-85,44,-70,-43,-109,74,90,-55,59,-98,102,-13,-78,-119,97,116,-10,-51,-70,61,120,-47,64,-3, 
  /* [14][0][][] */ -51,-100,86,69,71,-25,-18,-98,-68,-31,61,83,-22,-72,-76,-82,-42,-65,17,26,-39,38,-1,60,-106,-64,-23,28,-100,-103,-75,34,98,-21,-25,10,92,110,35,-94,-22,-127,39,84,59,-119,65,-75,89,31,69,26,90,-23,-11,18,-51,14,46,81,-16,-70,-26,66,-83,-12,77,-99,-77,-75,-77,86,10,79,50,-71,41,-93,54,37,46,-22,-102,-63,-104,-100,-102,93,100,7,84,-45,83,96,-22,57, 
  /* [15][0][][] */ 9,-19,-28,53,73,-79,53,-81,44,-5,-57,2,79,-2,-78,-90,60,10,-78,15,34,10,56,81,63,52,25,70,11,39,54,-86,0,2,-55,-9,-58,88,83,-62,32,127,-45,-23,15,-63,-40,-68,26,-62,-3,45,-81,-80,-42,-11,53,35,-39,89,-40,-59,-1,83,-32,72,-62,-1,-54,-3,45,-61,9,-13,43,-86,-5,38,80,58,-69,46,-91,-14,-100,-19,-76,30,66,54,-94,-37,38,82,-82,90, 
  /* [16][0][][] */ -68,12,84,-61,37,102,-39,28,37,40,-95,47,-21,-48,-57,-50,80,77,59,51,92,61,-38,36,-28,47,-72,55,-97,5,37,11,-97,65,43,47,-38,45,-50,-76,46,-6,57,77,55,97,79,-14,-20,-91,8,127,-40,112,58,31,32,69,57,21,100,87,38,56,43,8,-39,83,31,74,-36,-11,18,77,51,82,-5,77,-102,-18,7,-69,46,50,8,110,86,16,70,13,-15,92,57,-30,-69,24, 
  /* [17][0][][] */ 45,-121,43,85,-20,-64,-89,-37,47,-69,37,79,104,51,-42,-8,64,10,56,108,-55,13,28,5,-27,20,-11,7,102,-3,-14,57,-17,-6,47,8,3,52,-32,26,-115,-75,16,6,0,-33,97,-60,40,30,-40,-19,10,15,43,-17,-127,99,-30,-114,23,-22,8,58,-23,-24,40,-97,-41,38,103,13,45,-74,-55,5,50,4,31,-22,24,-34,-29,-111,-91,1,79,-64,-30,6,-70,-43,-7,77,-25,-31, 
  /* [18][0][][] */ -102,116,115,-73,-4,-100,-102,0,-4,80,-116,-54,-41,35,65,-59,38,-19,126,-20,111,-51,23,-84,51,-101,-19,127,38,41,5,54,49,-28,-116,-108,-32,46,-40,68,1,30,-54,-10,-115,19,20,21,82,-22,83,98,-117,2,7,92,-21,38,-21,-124,94,121,25,42,-68,-121,-31,102,76,-83,-79,117,-107,35,-97,-101,65,70,-2,-78,-60,8,25,3,107,-19,72,84,-115,-59,-63,111,99,-40,56,-17, 
  /* [19][0][][] */ 16,34,73,35,60,-88,100,90,92,-67,28,-14,-102,30,-61,59,69,-106,107,55,-27,78,-60,13,75,-85,25,-72,-98,-125,-65,45,81,-87,29,-5,5,-75,-62,-105,56,-105,-89,8,-91,29,74,-100,8,36,-43,56,-38,17,4,-14,24,98,-6,-27,54,-58,99,62,-75,-3,-32,-4,-14,49,73,-54,-68,-127,-61,-84,-24,-120,11,104,56,-119,-35,109,-92,-6,6,-8,89,27,-9,64,-36,112,72,-53, 
  /* [20][0][][] */ -12,74,63,85,-84,93,17,50,15,6,-82,-2,-11,80,34,-67,-50,-36,-67,-34,21,-47,-73,-72,73,-73,-102,45,19,10,-38,108,92,40,-19,50,36,-32,-18,-108,-70,-3,-89,-99,-25,-57,-70,100,66,-112,-95,66,43,118,46,-4,89,63,91,88,107,-55,-60,-34,-27,-63,-52,13,-82,-79,-67,71,-65,-82,26,20,111,66,101,100,78,11,74,16,56,127,-16,77,18,92,24,57,16,25,-3,4, 
  /* [21][0][][] */ 106,76,81,-109,99,-88,68,23,3,-75,-80,46,9,45,-49,-101,-107,-36,35,-12,122,-47,81,-95,66,-96,-29,80,18,7,-15,-24,5,22,-96,-127,126,108,-124,-30,-39,-20,36,-13,-107,-93,-84,103,-44,-82,-12,61,39,69,-104,32,-74,61,-54,122,63,-82,11,-19,88,34,-37,-82,-112,3,71,86,40,-19,82,69,-126,-28,75,120,17,100,42,-118,28,-118,73,-97,-115,87,120,-125,-56,-81,69,-32, 
  /* [22][0][][] */ 27,-53,-62,-84,76,-54,89,54,-89,72,-69,-102,103,-99,-98,-78,30,70,-101,-52,81,-64,28,27,85,-6,-97,90,-51,-66,-65,-102,41,53,18,14,5,-16,-51,-103,-22,-24,10,85,50,-107,83,-22,-68,-79,4,-36,-57,-88,-42,31,-17,-26,-22,-34,99,-70,-75,-106,-58,15,-97,-44,102,98,-19,-4,-59,4,61,-85,40,-44,61,88,98,-93,-61,-127,70,68,86,-41,-51,28,-57,53,15,19,-36,86, 
  /* [23][0][][] */ 60,-82,10,55,84,-94,-3,-80,53,-67,74,78,23,-87,25,-36,89,-32,-86,90,84,-62,91,-21,-13,-10,80,21,66,47,61,-29,-30,40,23,34,88,-4,-90,18,-118,-29,15,-89,-57,-79,104,25,42,-98,-75,-77,72,-58,-41,83,-78,-9,87,32,-92,-69,-49,-10,33,37,-93,-93,60,-2,102,-59,1,-25,-28,-83,35,-11,85,104,-41,-45,24,-127,81,-9,100,-25,-78,35,93,1,97,-42,-31,72, 
  /* [24][0][][] */ -57,-52,-82,-51,-70,-92,-64,-71,64,103,73,57,108,59,-23,-104,-51,34,27,-38,90,-60,-43,-21,44,-23,76,52,99,54,7,-49,2,14,51,30,-39,-71,60,-4,-83,-109,98,8,23,-35,50,64,-99,-45,-17,-18,66,44,65,-53,-12,77,26,-4,82,5,22,84,-77,90,-33,-77,-79,61,-40,-19,-25,39,86,84,52,-55,-83,-65,-61,-78,-47,-127,4,39,-6,-98,20,-98,9,-58,-9,26,-83,26, 
  /* [25][0][][] */ -74,-65,-65,-3,85,-68,-101,58,42,-103,-36,33,73,0,-90,-26,-57,42,22,-97,68,83,-13,-46,6,-49,-82,36,76,-72,35,105,85,-98,45,70,92,-65,-15,-5,-96,64,-89,5,90,31,65,23,-127,75,-68,-24,42,-26,-55,16,-28,56,-108,60,109,48,36,38,3,74,-9,-6,-75,8,-19,-103,38,-115,68,17,60,75,19,22,50,41,-42,46,-70,-63,-95,-104,-26,-46,96,28,-99,-13,-27,-86, 
  /* [26][0][][] */ 50,-103,-21,-15,-80,14,2,-17,-104,-116,102,77,-77,-48,7,-11,111,33,-79,-66,11,61,90,17,48,58,8,48,11,6,-75,11,-30,-55,-97,-91,-65,77,-51,101,-52,127,50,31,-61,75,-44,94,3,31,4,123,10,-35,-1,-104,101,59,49,41,4,-85,61,-17,110,-11,-53,61,-82,69,77,89,71,-94,-83,13,52,-105,-95,6,-28,87,73,-28,73,12,-46,17,-79,105,8,19,-46,115,51,81, 
  /* [27][0][][] */ 10,5,-60,-93,-104,-67,-54,-14,37,91,34,-94,-26,50,71,-28,52,-10,57,-73,-87,9,-23,-25,-96,42,-104,-9,56,19,-25,-9,56,61,-82,-78,-84,-57,-99,94,-70,41,21,12,89,17,59,92,127,66,61,-68,-77,-76,-4,-30,91,-23,-100,-72,-53,-58,-30,67,36,-46,-103,92,41,8,-107,14,53,-47,-10,-83,38,-64,77,89,74,-20,103,-12,-69,-62,-28,36,-43,-4,-34,-48,50,11,125,51, 
  /* [28][0][][] */ 81,-6,80,38,-127,-72,-113,-72,-31,-109,52,51,-75,-80,5,91,81,97,-66,63,-22,23,-103,-74,-106,71,-78,-60,-70,-73,-18,-27,-98,12,73,59,1,-100,-39,7,72,16,-104,35,-107,-8,14,43,1,-62,-93,-51,-97,19,32,34,48,-23,69,44,-27,-49,-95,-18,37,65,-24,73,-75,17,-95,-61,64,16,-7,-97,-109,-72,-77,43,-72,-92,98,-46,55,-106,58,-76,-95,-73,-33,-67,-40,48,-106,-80, 
  /* [29][0][][] */ 45,55,47,-52,-81,16,-105,1,89,-17,-84,-92,94,-100,-50,-42,-92,100,21,-62,-73,-37,49,3,-29,4,-45,-25,-98,-11,96,-2,44,-1,-78,-55,-13,92,-13,84,64,127,-46,74,0,99,-54,-24,47,-7,54,-48,64,-85,100,39,-86,49,-47,104,-109,86,-85,-47,-57,-60,45,82,84,-84,27,-69,99,68,53,24,110,-56,-31,27,-9,-75,-11,-39,57,122,38,78,-36,91,63,71,-100,15,-1,54, 
  /* [30][0][][] */ 33,-47,-34,48,-73,33,-33,3,107,-2,17,-40,-77,30,62,40,1,46,88,-67,50,-79,-80,19,-68,39,-52,105,-5,-96,-74,18,-57,-46,-93,-23,30,8,7,28,107,-39,9,104,113,-18,99,80,-28,87,39,-61,96,-31,7,98,-36,-45,-66,-16,-61,5,-44,-7,-73,-71,-57,100,-39,108,50,-11,-69,103,66,-56,-25,-60,-51,-25,47,42,-76,24,-78,58,-95,127,-5,-61,90,53,-16,24,28,-28, 
  /* [31][0][][] */ 67,-47,39,94,66,75,-11,-77,-22,-10,-34,-78,81,-94,-39,116,-34,-38,55,58,64,19,-1,90,50,-71,33,48,-51,-49,73,113,27,31,-69,3,96,6,-36,-88,104,-4,-21,43,28,-18,-46,44,115,54,108,27,-71,-14,-34,19,-59,66,34,125,-10,9,123,-26,81,104,-22,-44,73,-106,-95,37,-82,-14,19,44,-25,-33,51,80,-46,-7,60,127,59,120,-42,38,38,-24,-57,-37,12,102,38,11, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017187069170176983, 0.0022338165435940027, 0.0020468700677156448, 0.0019063492072746158, 0.001725322799757123, 0.0020162332803010941, 0.0017959093675017357, 0.001758560654707253, 0.0020151559729129076, 0.0018658036133274436, 0.0018214262090623379, 0.0019301855936646461, 0.0017532657366245985, 0.0018108374206349254, 0.0019958096090704203, 0.0022858991287648678, 0.0020566124003380537, 0.0026771184056997299, 0.0016990371514111757, 0.0017677594441920519, 0.0019173139007762074, 0.0016612829640507698, 0.002054550452157855, 0.0021441059652715921, 0.0021335382480174303, 0.0020076404325664043, 0.0019488607067614794, 0.0020247285719960928, 0.0019710913766175508, 0.0019639378879219294, 0.0021092910319566727, 0.0022467095404863358, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1481, -38, 4178, 5008, 5616, -2214, 5289, -1287, -2415, -830, 4947, -2104, 4543, 6238, 2163, 2012, -717, -562, -1841, 5180, 2287, -847, 2400, -649, -996, 3674, 1498, 2046, 4637, 2012, 4982, 1225, 1340, 5542, 5764, 3365, -558, 3272, 2748, -3997, -124, 1354, -13, 1516, -1246, 443, -1476, 876, -6688, 1965, 1189, -3749, 7459, -964, 1771, 1722, 1107, 2633, -749, -1969, 179, 1640, 254, 4462, 5213, 3480, 3012, 5442, 4962, -697, 3169, 6463, 3299, -1622, 4072, 6668, 929, -3630, 492, 1570, 10463, 1928, -622, -2370, 1233, 743, 1490, -1917, 3475, -500, 4367, 1418, 48, -3811, -227, 1550, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001312151289312169, 0.00026425925898365676, 0.0001331899402430281, 0.00015179569891188294, 0.00011201579764019698, 0.00018510299560148269, 0.00011133761290693656, 0.0002059537946479395, 0.00016563560348004103, 0.00018590885156299919, 0.00013071564899291843, 0.00020575795497279614, 0.00012272833555471152, 9.5831783255562186e-05, 0.00014440836093854159, 0.00020384855451993644, 0.00023418158525601029, 0.00017037380894180387, 0.00016312462685164064, 0.00011958721006521955, 0.00018868195184040815, 0.00015214018640108407, 0.0001482529187342152, 0.0001719579886412248, 0.00023374767624773085, 0.000163793854881078, 0.00019353233801666647, 0.00016354679246433079, 0.00015471263031940907, 0.0002113426016876474, 0.00010571144230198115, 0.00018892546358983964, 0.00020731311815325171, 0.00011262275802437216, 0.0001068478959496133, 0.0001456207683077082, 0.00018646275566425174, 0.0001344037736998871, 0.00014082221605349332, 0.00013068734551779926, 0.00015300208178814501, 0.00020903201948385686, 0.0001947100245160982, 0.00016820219752844423, 0.00019218225497752428, 0.00016396956925746053, 0.00016576632333453745, 0.00015165074728429317, 9.8049065854866058e-05, 0.00013519267668016255, 0.00021231618302408606, 0.00012287430581636727, 9.9192569905426353e-05, 0.00017313298303633928, 0.00018770059978123754, 0.00014353310689330101, 0.00017741623742040247, 0.00014418202044907957, 0.0002021036489168182, 0.00015758354857098311, 0.000193215993931517, 0.00015982502372935414, 0.00022690750483889133, 0.0001468616392230615, 0.00013084942474961281, 0.00013520297943614423, 0.00012939482985530049, 0.00012917110871057957, 0.00013434853462968022, 0.00019343158055562526, 0.00015089847147464752, 0.00010560984810581431, 0.00013474738807417452, 0.00014700012980028987, 0.00017131236381828785, 0.0001175572833744809, 0.00012098271690774709, 0.00017563963774591684, 0.00016949283599387854, 0.00012566785153467208, 7.983175601111725e-05, 0.00014997783000580966, 0.00018174815340898931, 0.00014055828796699643, 0.00016097421757876873, 0.00018794770585373044, 0.00017276726430281997, 0.00019447215890977532, 0.00017770305566955358, 0.00018691964214667678, 0.00013821663742419332, 0.00014787909458391368, 0.00017282376938965172, 0.00011621867452049628, 0.00019570926087908447, 0.00015387064195238054, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -19,89,-77,38,55,-43,102,76,-74,9,47,-81,78,127,-76,34, 
  /* [1][0][][] */ -19,-4,-52,-27,-11,45,22,-127,30,-50,-20,-49,-6,-45,-51,4, 
  /* [2][0][][] */ -19,-25,27,83,24,51,-116,127,-18,-4,79,-65,-16,-75,-42,62, 
  /* [3][0][][] */ 86,-93,85,-12,1,-40,-28,127,-38,63,70,63,-14,53,2,22, 
  /* [4][0][][] */ -49,-27,-4,50,-96,8,-28,-122,-11,-2,44,-5,29,60,106,127, 
  /* [5][0][][] */ 127,29,-34,-23,-84,24,24,60,27,-14,54,83,116,17,-77,-7, 
  /* [6][0][][] */ 11,-40,-59,-62,-82,3,-3,-44,-62,-55,-29,41,83,54,127,-2, 
  /* [7][0][][] */ -56,35,-33,-79,1,-53,-78,13,-101,53,-65,-67,-127,-38,17,94, 
  /* [8][0][][] */ 51,42,82,11,54,17,84,13,65,-25,52,6,-127,-22,-92,21, 
  /* [9][0][][] */ -34,65,29,-45,-30,-17,32,-18,-26,46,-45,8,49,127,28,25, 
  /* [10][0][][] */ 71,50,-44,51,-44,-23,56,-43,-88,-25,-50,-98,-127,-63,9,107, 
  /* [11][0][][] */ 41,1,67,5,-4,-33,15,112,-98,33,-21,12,-18,-6,54,127, 
  /* [12][0][][] */ -61,-32,14,7,30,-8,125,47,-76,37,9,-4,-17,86,-62,127, 
  /* [13][0][][] */ 5,29,38,51,100,27,110,114,-52,97,-68,-40,23,76,-127,-12, 
  /* [14][0][][] */ -127,114,12,-4,1,-2,55,10,-51,40,118,5,-102,17,-57,65, 
  /* [15][0][][] */ -9,-13,-127,-45,76,-39,-90,-40,-18,-20,-17,-67,-4,-77,-47,40, 
  /* [16][0][][] */ 118,-16,0,-13,24,-24,34,-28,-29,5,127,49,52,-1,-28,17, 
  /* [17][0][][] */ 18,17,-37,-100,-13,-52,108,-127,7,-29,-51,26,45,74,15,41, 
  /* [18][0][][] */ 32,127,-18,-56,55,-70,-28,-61,-35,125,-26,-11,-26,54,-9,-36, 
  /* [19][0][][] */ -74,-114,127,-83,42,-125,35,-29,36,49,89,117,20,1,61,-17, 
  /* [20][0][][] */ -19,90,61,6,11,-3,25,-24,58,-3,98,-21,-127,-23,-80,-3, 
  /* [21][0][][] */ -59,42,17,10,66,40,63,49,-127,48,-35,12,-19,26,-54,-31, 
  /* [22][0][][] */ 13,-86,48,17,27,-127,115,9,11,-47,-39,-65,34,-77,-61,-42, 
  /* [23][0][][] */ -61,-106,34,68,23,-12,11,-45,23,-38,74,2,8,82,94,127, 
  /* [24][0][][] */ 1,0,22,77,45,19,-53,-127,65,13,-39,13,5,-1,-21,-20, 
  /* [25][0][][] */ -7,36,13,-49,-32,2,8,-39,-19,49,-52,-17,42,127,33,0, 
  /* [26][0][][] */ -72,79,10,25,32,-95,0,-29,10,27,12,79,6,8,-87,127, 
  /* [27][0][][] */ -16,-127,-57,9,-67,99,-2,-68,25,-45,62,-35,33,-56,-107,-23, 
  /* [28][0][][] */ -38,-2,45,82,28,5,-37,-126,-127,54,109,-7,69,11,-50,-17, 
  /* [29][0][][] */ -127,101,-17,-23,-23,19,-114,-64,-50,-28,3,4,5,-50,-114,70, 
  /* [30][0][][] */ 52,77,-48,86,-110,-109,-72,-10,-52,2,11,-113,127,40,-19,111, 
  /* [31][0][][] */ 127,32,-70,-31,-65,26,92,31,-52,-19,62,46,43,16,-20,1, 
  /* [32][0][][] */ -27,-13,127,-1,-28,82,73,11,-15,-20,-11,16,12,68,71,34, 
  /* [33][0][][] */ -2,24,-64,-59,-23,26,127,31,-5,-9,22,-60,96,113,-57,50, 
  /* [34][0][][] */ -85,-17,92,19,20,-47,103,-14,-127,28,39,-50,53,67,-44,-29, 
  /* [35][0][][] */ -9,14,-45,16,-76,120,-35,-12,-29,127,11,102,-78,80,14,49, 
  /* [36][0][][] */ -6,-72,127,-58,-56,22,-47,-15,21,16,-58,77,7,-90,-32,40, 
  /* [37][0][][] */ 93,-9,67,-31,124,-71,-56,27,-59,127,-67,-1,-94,-47,116,-25, 
  /* [38][0][][] */ 44,36,28,-104,-3,-64,-108,77,-103,84,-97,-51,-80,-127,-123,80, 
  /* [39][0][][] */ -74,16,-62,-29,-75,-72,67,15,-127,-26,30,80,37,1,-5,61, 
  /* [40][0][][] */ 127,26,14,-92,-78,10,35,-44,-45,-26,-49,-96,28,50,35,38, 
  /* [41][0][][] */ 71,-81,-35,-50,-3,-14,-48,-31,51,-16,4,-54,127,-71,43,-15, 
  /* [42][0][][] */ -10,-82,-44,127,4,-93,-106,14,15,5,1,40,-77,67,-53,-10, 
  /* [43][0][][] */ -81,-45,-55,-127,-56,3,-6,66,50,-127,-38,29,-15,-53,-24,83, 
  /* [44][0][][] */ -31,40,32,-50,-33,-25,27,109,127,-83,66,91,125,39,-13,-17, 
  /* [45][0][][] */ 37,72,-89,94,127,-91,-47,-73,119,-78,72,-61,-23,1,-71,62, 
  /* [46][0][][] */ -28,-41,14,-6,90,-29,30,30,-16,127,-21,-108,26,60,-55,79, 
  /* [47][0][][] */ 84,-37,-39,-14,76,-10,-43,-63,5,127,-27,32,-4,-111,-77,12, 
  /* [48][0][][] */ 7,14,-22,-127,-9,-41,113,-115,-1,-14,-22,59,54,65,3,51, 
  /* [49][0][][] */ -35,127,-68,33,47,-53,69,67,-36,29,45,-97,-38,84,120,-94, 
  /* [50][0][][] */ 8,35,-18,0,-127,-3,-69,-55,50,73,33,35,-39,-37,-3,40, 
  /* [51][0][][] */ 127,-48,-41,-9,-41,89,-105,-43,45,-15,-44,69,-36,-67,-1,38, 
  /* [52][0][][] */ -32,-67,54,73,-34,-122,-127,7,-66,-48,-26,-58,8,-69,-3,103, 
  /* [53][0][][] */ 25,106,59,-127,10,113,96,-16,-12,-17,-7,-35,80,-124,1,54, 
  /* [54][0][][] */ 38,127,2,-17,-9,-88,-108,47,11,-30,-42,120,88,86,25,57, 
  /* [55][0][][] */ -53,-22,64,21,58,-44,105,102,-105,0,29,23,127,51,-17,11, 
  /* [56][0][][] */ 127,27,17,30,-49,106,-46,-76,-23,44,-84,-1,-54,96,-7,36, 
  /* [57][0][][] */ -48,-34,-49,-27,-65,-93,69,-22,-127,-27,71,61,19,37,-14,66, 
  /* [58][0][][] */ 43,-57,66,22,12,-69,-12,12,22,-9,-127,-21,17,-33,-44,48, 
  /* [59][0][][] */ 74,14,-127,77,5,33,80,-29,-62,-52,29,-83,-100,-58,29,97, 
  /* [60][0][][] */ 3,35,-15,21,-18,-19,-29,0,-27,-78,58,115,-42,-127,-29,-10, 
  /* [61][0][][] */ -39,9,83,-85,-57,44,4,122,-29,-87,66,75,78,0,1,127, 
  /* [62][0][][] */ 79,47,-10,-127,-18,4,6,-42,-10,29,-33,42,26,-15,-83,-72, 
  /* [63][0][][] */ -3,-30,4,-2,-68,-74,-56,14,-81,-10,-28,-13,127,9,50,-6, 
  /* [64][0][][] */ 20,-4,-7,54,-99,-50,-17,-76,47,127,42,11,31,-45,-51,119, 
  /* [65][0][][] */ -33,4,-14,-13,-72,69,25,-20,44,-107,101,-56,65,67,-127,68, 
  /* [66][0][][] */ -122,108,-111,-106,38,-28,-127,-83,-99,113,94,-7,-115,-68,56,43, 
  /* [67][0][][] */ 2,-33,-127,-108,71,80,5,-27,-28,-2,52,-16,25,38,19,48, 
  /* [68][0][][] */ 49,13,-6,-42,-63,29,15,40,-73,75,127,-7,-17,-40,-126,4, 
  /* [69][0][][] */ 67,-95,60,-43,18,-109,-22,127,-10,64,82,87,-27,81,-35,10, 
  /* [70][0][][] */ 43,1,116,44,94,-31,127,23,21,31,-53,51,-84,71,-92,50, 
  /* [71][0][][] */ 12,34,87,-78,-127,-69,10,3,-17,-17,16,-105,-68,-1,16,19, 
  /* [72][0][][] */ -58,-94,17,-118,71,-11,4,42,-76,14,-110,-13,58,121,-59,127, 
  /* [73][0][][] */ 18,14,55,3,127,-98,-45,13,-40,102,-86,39,-90,-49,117,-13, 
  /* [74][0][][] */ -88,3,-127,-75,56,-38,-43,16,-66,-3,-126,-48,-27,-61,-25,53, 
  /* [75][0][][] */ 93,-24,52,-39,22,5,-127,-24,-11,-98,77,6,3,-11,-9,-5, 
  /* [76][0][][] */ 7,-58,-47,119,34,99,103,-69,92,-123,79,127,50,-97,-66,44, 
  /* [77][0][][] */ -33,-25,127,-30,36,-21,-35,-126,24,12,36,84,48,51,23,-2, 
  /* [78][0][][] */ -44,1,16,-44,4,-53,28,-17,26,-14,12,-95,-107,-74,-127,-57, 
  /* [79][0][][] */ -109,-74,-13,27,127,29,-7,24,14,32,-3,57,-49,-67,-88,-5, 
  /* [80][0][][] */ 10,-107,33,127,-36,-10,-112,70,0,15,67,-4,-68,-18,-12,55, 
  /* [81][0][][] */ 104,67,-13,81,4,40,23,127,12,16,113,59,102,37,52,-16, 
  /* [82][0][][] */ -47,10,16,-32,27,-127,-109,-87,5,73,-46,-33,-29,89,-71,-23, 
  /* [83][0][][] */ 107,-35,119,-39,-57,-37,-127,-9,5,-122,31,-73,-23,-4,-7,-10, 
  /* [84][0][][] */ 21,-59,-98,32,127,43,32,24,-101,13,-107,-30,52,-38,-61,7, 
  /* [85][0][][] */ 10,84,36,-50,95,12,43,-100,127,-28,53,2,107,-81,14,10, 
  /* [86][0][][] */ 116,-39,127,46,6,-61,82,38,-64,-50,-91,-40,33,14,-72,16, 
  /* [87][0][][] */ -6,9,9,-65,73,-20,-43,21,37,-36,72,-31,-77,-127,-3,19, 
  /* [88][0][][] */ -55,-28,35,-5,19,33,-62,-47,-2,8,-71,-127,-38,-39,-12,-17, 
  /* [89][0][][] */ -69,15,16,-67,26,9,-127,18,87,19,-64,-13,-9,-86,-40,-24, 
  /* [90][0][][] */ -17,-23,-25,-75,127,14,-53,47,35,62,35,-5,28,22,-77,-8, 
  /* [91][0][][] */ -38,-67,10,60,-60,-2,-20,72,-32,-78,28,-64,5,73,38,127, 
  /* [92][0][][] */ -30,75,4,-8,-18,59,-99,56,-46,-5,72,11,-37,127,45,32, 
  /* [93][0][][] */ -3,81,-61,-74,69,92,-89,2,72,63,77,67,-127,18,-37,75, 
  /* [94][0][][] */ 21,71,100,8,-127,-39,14,-8,18,-16,27,-18,-64,-26,13,-27, 
  /* [95][0][][] */ 6,38,38,4,127,-19,-105,67,30,8,-86,99,4,4,119,-47, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015381879638880491, 0.0030978166032582521, 0.0015613379655405879, 0.0017794464947655797, 0.0013131210580468178, 0.002169896150007844, 0.0013051709393039346, 0.0024143224582076073, 0.0019416867289692163, 0.0021793427877128124, 0.0015323326224461198, 0.0024120267480611801, 0.0014387003611773252, 0.0011234016856178641, 0.0016928474651649594, 0.0023896435741335154, 0.0027452267240732908, 0.0019972310401499271, 0.0019122514640912414, 0.0014018779620528221, 0.0022118508350104094, 0.0017834849422797561, 0.0017379159107804298, 0.0020158018451184034, 0.0027401403058320284, 0.0019200966926291585, 0.0022687101736664772, 0.0019172003958374262, 0.001813640701584518, 0.0024774936027824879, 0.0012392173521220684, 0.0022147055715322495, 0.0024302573874592781, 0.0013202362461015582, 0.0012525395723059773, 0.0017070600297302008, 0.0021858359687030315, 0.0015755672939121723, 0.0016508083790540695, 0.001532000838778913, 0.0017935885116457939, 0.0024504074826836586, 0.0022825158666819334, 0.001971774036064744, 0.0022528837434947491, 0.0019221564289182425, 0.0019432192202657461, 0.0017777472967281938, 0.0011493940837681293, 0.0015848152106627822, 0.0024889064952731133, 0.0014404114335775375, 0.0011627989588305354, 0.0020295758731663227, 0.0022003469057381153, 0.0016825872007757425, 0.002079786965623498, 0.0016901941271498799, 0.0023691887035965919, 0.0018472954398021102, 0.002265001880005002, 0.0018735715420916677, 0.0026599552948027849, 0.0017216063570231199, 0.0015339009696617723, 0.0015849360497668386, 0.0015168491518124938, 0.0015142265474423766, 0.0015749196754768491, 0.0022675290238112211, 0.0017689287196844816, 0.0012380264233797789, 0.0015795953804627061, 0.0017232297686859965, 0.0020082334522157907, 0.0013780818553641438, 0.0014182369923219085, 0.002058960497379303, 0.0019869038369506598, 0.0014731591800227761, 0.00093583908164873719, 0.0017581363208591938, 0.0021305684931576252, 0.0016477144090458751, 0.0018870430067181587, 0.0022032435517758131, 0.002025288762524724, 0.0022797274868935347, 0.0020831492729485035, 0.0021911920048296452, 0.0016202640254050493, 0.0017335336888208985, 0.0020259511657059193, 0.0013623898848891258, 0.0022942295763641596, 0.0018037704285234213, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 7504, 16485, -1038, 4882, -765, 6395, 1351, 2283, 17430, -3495, -8023, 8820, -15224, 13814, 3734, 8623, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.071075793239288e-05, 7.3734176112338901e-05, 5.4876029025763273e-05, 6.4035273680929095e-05, 6.9240624725352973e-05, 7.8344732173718512e-05, 5.2930579840904102e-05, 5.3936571930535138e-05, 9.6229938208125532e-05, 7.2395916504319757e-05, 5.7807214034255594e-05, 5.0309787184232846e-05, 7.7037926530465484e-05, 6.4952328102663159e-05, 8.3144208474550396e-05, 7.5259951699990779e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -94,36,46,-23,-60,-15,-62,1,-40,15,-4,-17,45,46,24,-33,18,-11,87,12,24,-59,127,71,43,19,-3,36,-53,-102,-91,11,-36,-53,33,12,11,28,-3,26,2,3,-72,3,-76,-19,-10,84,-16,12,-31,-6,-14,4,33,-48,-86,-1,-10,82,47,17,-2,14,-21,-50,-39,32,-40,-65,8,-3,14,-7,-72,-46,-38,19,-47,-7,-42,75,65,-76,16,57,5,60,32,-18,-6,-35,-37,-24,-57,13, 
  /* [1][0][][] */ 37,18,20,-57,-64,-17,0,10,-9,25,51,-48,10,-16,-74,-41,-7,-5,-70,21,-5,-72,16,52,-3,-58,-5,-45,70,-98,103,-68,50,16,-25,50,32,66,-21,-38,31,20,-7,-18,-1,44,-127,-51,-52,-51,-11,-25,32,-44,-41,43,20,-3,-34,15,17,46,-13,-89,-7,-10,-63,-14,14,-14,-84,-3,-43,-22,20,-63,5,16,23,-79,-25,-28,-85,-35,24,-28,-25,14,-78,0,-52,43,15,65,-50,47, 
  /* [2][0][][] */ 69,-33,24,26,12,-75,53,7,-19,-17,-19,-19,-84,-34,20,-32,-92,-43,-38,49,-7,-44,-53,18,-2,-70,9,-32,-39,34,-47,108,-59,127,-21,26,-13,-11,-10,-15,-96,65,62,16,-51,4,-10,-16,29,8,-40,-60,55,-15,-26,56,27,-2,49,1,9,53,-30,-1,57,14,4,-1,14,51,-40,-17,40,39,57,41,36,-76,76,62,71,-21,-36,32,-57,23,26,54,13,-3,-24,38,-37,36,-24,29, 
  /* [3][0][][] */ -3,-10,-28,5,5,-13,7,-54,-29,50,32,53,21,-9,-47,37,7,-30,21,11,11,127,29,-47,4,23,-23,2,63,-39,58,-24,-23,40,-23,-27,19,46,29,10,-77,-37,-38,28,-33,26,30,-6,-22,-49,-11,-29,50,-76,-33,-49,8,80,-25,3,-4,-6,-47,-3,20,45,-35,-1,-32,-2,13,-75,-36,-45,31,-8,17,-6,-30,-22,-29,-12,-55,15,-16,-42,31,-33,-4,16,21,-15,51,21,-42,56, 
  /* [4][0][][] */ 31,14,-37,18,33,25,-48,8,-38,76,95,-18,-15,1,9,-52,11,-10,-30,54,17,-48,54,84,-75,-3,-127,18,-47,-65,10,9,-66,-46,24,62,18,41,15,30,-38,-51,51,-26,-3,10,-34,61,-45,60,6,20,45,-17,-79,18,42,-18,11,-5,47,-3,28,5,-54,17,-29,13,-55,35,-41,48,44,-65,-41,-50,31,-57,-3,16,-48,90,-73,6,-27,17,31,-59,56,-2,24,10,-55,-34,32,32, 
  /* [5][0][][] */ -77,32,41,-14,49,-20,62,-47,1,41,-1,-21,48,-15,-31,-47,-2,-31,53,15,-107,-27,-62,52,-40,-4,47,18,49,-69,-22,55,65,108,-21,27,-4,16,42,-17,-26,104,79,-37,-9,71,35,0,7,15,-14,43,9,-38,33,-89,52,-52,-67,-66,58,89,-48,-8,88,-48,-87,-75,-46,-27,-64,8,-16,14,-20,-50,21,-32,-47,-32,127,-17,18,-98,-80,45,26,1,-46,51,29,-12,-24,44,17,93, 
  /* [6][0][][] */ 36,-6,-75,35,-28,-108,96,92,-65,61,-24,62,-127,-84,63,55,-3,-61,-1,10,-12,-7,-75,-67,-60,34,74,25,27,26,94,-60,14,17,22,-62,12,11,27,70,-1,12,-56,-25,6,-63,-67,20,32,-107,-29,61,39,8,-22,-68,59,38,16,-4,-99,58,-91,-6,23,9,9,53,28,32,1,-57,-40,23,86,35,59,-27,50,-59,-11,-61,-66,72,1,-70,51,4,-43,50,36,43,-16,2,-30,107, 
  /* [7][0][][] */ 29,81,-36,-49,-27,-21,35,10,-66,31,-49,-66,-47,18,19,-14,-47,-43,-28,65,-21,127,1,30,-11,-2,25,18,44,35,86,-39,78,32,-9,8,5,-7,10,34,-72,-10,6,-46,30,-33,78,-26,39,-67,-98,-41,-41,0,-4,-11,16,18,-99,6,3,127,31,-36,-29,-3,-38,25,-50,-14,-102,21,13,71,-40,48,-53,47,21,-65,-26,-59,60,-71,49,-30,-1,-9,-2,65,-78,51,58,-42,-41,16, 
  /* [8][0][][] */ -4,86,-58,38,-31,-27,-81,28,-94,-25,15,9,-34,45,18,88,11,-56,-3,4,54,-10,13,-5,-35,83,-4,32,-7,-12,-48,-26,-18,-69,-35,-76,-45,26,44,7,4,-35,36,5,-51,-43,-4,-16,-18,-24,62,82,-9,-21,-70,107,-28,31,-7,-41,-46,0,7,64,-28,-62,-48,-11,-29,9,-1,19,-19,-55,-123,-17,-53,33,-79,-59,-27,8,-47,-44,0,6,20,44,12,80,-64,-21,-104,-127,22,-55, 
  /* [9][0][][] */ -19,20,-61,51,-38,-34,64,57,-20,39,-30,86,-35,-27,33,127,4,16,72,22,3,20,26,-94,-32,-9,25,-15,5,-24,45,42,-35,10,4,-113,23,-17,-17,-20,-22,16,35,-19,-1,1,25,13,29,81,17,-18,-48,-73,-5,-5,-9,-8,73,-18,-58,62,-59,-34,72,-9,-14,8,-78,28,40,21,-12,84,-24,-19,-21,14,-32,2,44,-36,62,4,22,-21,-8,-39,-56,10,-4,7,69,24,-45,0, 
  /* [10][0][][] */ 64,2,-33,1,-41,-27,68,1,-1,-32,-27,-13,-98,-24,13,-7,-76,-18,30,26,24,42,15,-6,-44,78,42,-12,-56,-82,-24,-16,69,-24,50,10,67,-84,87,127,8,-59,-1,10,-10,-93,1,61,31,83,-78,-52,-14,30,9,50,8,-59,82,48,-7,55,-65,-28,-16,-61,27,52,9,-19,-6,27,114,40,21,-83,35,-52,65,1,-60,25,37,31,-43,-15,8,31,-46,-23,24,63,61,58,-29,10, 
  /* [11][0][][] */ -56,-39,50,-65,17,-1,-36,-52,38,-57,7,1,-14,0,11,9,-67,12,63,7,-71,19,-76,-91,24,26,-52,47,29,-65,35,-41,17,-3,14,-12,-74,10,-113,19,-76,66,-53,60,28,18,-1,-40,16,-25,-73,-58,25,29,84,-56,-40,-61,5,-49,-30,-56,-10,-127,-1,-70,56,78,108,17,66,-41,-32,-13,72,-44,96,43,27,50,18,-10,-12,83,91,11,-15,-29,-83,-69,-13,39,61,38,55,71, 
  /* [12][0][][] */ 40,-19,5,-39,32,117,-8,39,36,56,-4,50,13,44,21,4,-70,54,23,56,127,6,62,-77,37,18,-69,-73,-24,82,5,7,32,0,14,-39,43,-1,-30,-36,21,-22,38,62,-12,35,9,-3,-66,22,-8,15,-18,-19,8,16,-45,60,14,45,24,-86,7,-105,-13,95,-4,-41,-12,-35,69,-2,-15,20,-15,42,-2,50,-69,-4,-30,24,126,23,-14,69,-29,-71,67,6,-86,63,78,3,-17,-94, 
  /* [13][0][][] */ -17,36,-1,-40,-36,-4,-1,-35,7,-41,-43,-83,52,-120,-32,-74,-27,-28,-84,-16,-113,-24,9,96,-27,1,118,-1,16,-47,64,42,3,13,-124,127,-32,-56,33,-56,113,9,-10,29,6,-98,70,-34,71,-12,-54,17,33,1,-12,68,57,-58,-37,-9,49,57,-4,-96,-14,39,-29,41,-83,-40,-77,-16,-73,19,-45,-85,-100,16,49,95,-31,53,41,-86,49,36,36,-21,-20,-27,-15,32,-54,5,-28,-7, 
  /* [14][0][][] */ -1,21,-87,-32,87,96,-89,-10,42,-39,88,-1,30,-20,-50,-70,-67,16,37,127,21,-30,7,17,9,35,-35,76,15,1,-30,17,72,-16,-43,-3,-19,54,73,8,68,7,35,2,-18,-41,50,-39,31,-14,-4,-17,39,16,-34,32,24,61,-98,-16,-18,-79,-43,-95,20,-38,-59,-4,-65,49,-25,46,5,-30,-21,-39,35,-9,-65,-45,40,12,-4,-25,-9,57,-20,-11,-34,81,73,11,-10,-28,-34,-63, 
  /* [15][0][][] */ -81,-41,53,-57,13,-28,-39,-86,-18,5,-8,64,-13,-29,50,94,-120,-14,28,-62,10,-22,-22,-95,61,-10,51,-61,-73,-117,-62,29,-39,71,84,-88,-14,-38,27,-20,-33,-8,26,-8,15,-1,79,109,-55,0,10,-52,-38,50,9,-59,-112,-15,104,14,-23,25,-95,20,-78,-4,12,22,39,-64,91,-44,56,-31,-38,-46,17,18,63,21,-31,72,67,41,-5,-23,-127,-9,-14,-68,-80,47,55,-47,-21,60, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002155207097530365, 0.0031337023247033358, 0.0023322312626987696, 0.0027214991860091686, 0.002942726481705904, 0.0033296509645879269, 0.0022495496086776257, 0.0022923042997717857, 0.0040897722356021404, 0.0030768264550715685, 0.0024568066000938416, 0.0021381659898906946, 0.0032741117756813765, 0.0027604738716036081, 0.0035336287692189217, 0.003198547987267375, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 129, 438, -2778, -3739, -754, 3876, 531, -1285, 145, 85, 9717, -1785, -441, 11738, 11022, -5745, 14062, 3853, -5242, 175, 1583, -3737, -774, -1057, 227, -4093, -1903, -4823, 918, -9406, -1656, 631, 12318, 419, -1208, -6, -57, -1897, -1201, 6222, -3, -292, 259, -6390, 18592, 14525, 781, 15865, -402, 13774, 17718, -3794, -721, 918, 523, 9805, -115, 185, 16574, 7162, 7178, 13810, 7395, -8201, 1191, -430, -1983, 3066, -1823, -1534, 4626, 1991, 12778, -551, -28, 10789, -1433, 1455, 13042, -638, -742, 17275, -1607, 1110, 18912, 2831, -2950, -2738, 2999, -5296, 11806, 63, -1222, 1545, -5527, -3543, };
const TfArray<96, float> quant10_scale = { 96, { 0.00023105500440578908, 0.00017597481200937182, 0.00013557366037275642, 0.00018302320677321404, 0.00026645921752788126, 0.00030117866117507219, 0.00025526108220219612, 0.00019110320135951042, 0.00027355921338312328, 0.00015822392015252262, 0.00012405046436470002, 0.00035283042234368622, 0.00029020098736509681, 0.00011702239135047421, 0.0001121300010709092, 0.00013487669639289379, 0.0001121994573622942, 0.00022788424394093454, 0.00015890496433712542, 0.00011982455180259421, 0.00017217955610249192, 0.00024617800954729319, 0.00022431337856687605, 0.00023290295212063938, 0.00073966203490272164, 0.00017876460333354771, 0.00024308272986672819, 0.00011138680565636605, 0.00017632337403483689, 8.0180761869996786e-05, 0.00032006454421207309, 0.00020731701806653291, 0.00015781440015416592, 0.00019189635349903256, 0.00028882670449092984, 0.00027860462432727218, 0.00018054796964861453, 0.00025062882923521101, 0.0002916711091529578, 0.00011150343925692141, 0.00019598350627347827, 0.00023597390099894255, 0.00023623353627044708, 0.00010772731911856681, 7.2118498792406172e-05, 9.1250469267833978e-05, 0.00024471720098517835, 0.00010807930084411055, 0.00019209072343073785, 9.7496587841305882e-05, 9.3068796559236944e-05, 0.00011330644338158891, 0.00019739397976081818, 0.00014243063924368471, 0.00022435384744312614, 0.00015757992514409125, 0.00019836126011796296, 0.00021927391935605556, 0.00013902598584536463, 0.00013191507605370134, 0.00015446187171619385, 0.00014698134327773005, 0.0001433018478564918, 0.0001062852461473085, 0.00014634378021582961, 0.00027221997152082622, 0.00029857110348530114, 0.00018519826699048281, 0.00021699987701140344, 0.00019462643831502646, 0.000247886375291273, 0.00015987962251529098, 9.4170150987338275e-05, 0.00021509794169105589, 0.00026349382824264467, 0.00010570764425210655, 0.00013039760233368725, 0.00019801082089543343, 0.00011802023800555617, 0.00028814034885726869, 0.00028033880516886711, 7.7960379712749273e-05, 0.00026664257165975869, 0.00019822378817480057, 6.9460242229979485e-05, 0.00019658994278870523, 0.00015678635099902749, 0.00025038680178113282, 0.00019371981034055352, 0.00018489107606001198, 0.00010803143959492445, 0.00044694254756905138, 0.00025527356774546206, 0.00023860676446929574, 0.00011059848475269973, 0.00031725442386232316, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 32,113,-7,7,-31,0,43,55,51,-61,-83,24,-17,-20,34,-45,-108,11,20,15,26,81,75,83,21,4,-40,-6,-22,23,18,-30,-50,18,-34,119,-10,67,4,-16,29,-33,-3,38,-121,-55,9,-29,-25,-105,-19,-14,12,60,-26,6,-78,-64,-62,-127,-127,-11,-109,-10,-31,48,42,-29,-29,40,29,-11,-34,12,41,0,19,-46,-112,35,8,-89,51,-21,-77,-62,-25,6,-126,9,-96,41,70,-17,65,0, -42,-35,-5,86,-7,79,-36,-8,50,34,-127,59,-30,-61,-110,127,-127,57,55,82,117,25,110,127,34,24,23,44,5,127,-13,-127,50,105,6,85,62,96,-17,-127,127,-10,101,127,-79,-104,127,-77,-16,-114,-97,-30,8,127,-33,-127,10,26,-119,-79,-66,-127,-58,103,-38,87,127,-33,-8,127,127,-12,-52,31,-42,-101,34,-72,-84,127,-4,-69,127,-63,-127,-62,85,44,91,87,-86,7,127,-38,127,26, 14,-109,-11,-1,-22,-15,-22,51,20,57,-78,-2,-13,31,13,-68,-53,3,15,10,31,63,51,92,20,-51,39,37,11,31,-1,-64,-43,-80,-43,85,-2,-16,15,6,-8,33,-17,60,-69,-27,-1,9,21,-61,28,-1,7,-16,12,8,43,-78,-12,-69,-87,9,-73,-25,42,21,-38,-22,-33,-20,0,10,-12,-40,-14,-11,5,-17,-81,6,-7,-99,23,-6,-31,-42,-18,-25,-84,5,-24,36,21,29,22,-2, 
  /* [0][1][][] */ 91,-9,62,104,6,-51,126,60,-35,-127,-78,127,1,-127,-59,43,-52,-53,78,19,-127,9,-127,-92,-8,73,-115,127,-92,92,127,63,27,54,18,124,-127,85,-18,-54,66,-127,18,75,-127,-67,6,-114,-127,-116,-123,8,127,-71,77,-23,-127,-3,-72,-2,-47,-77,-29,55,-114,-15,71,-101,-45,35,-58,-127,-127,63,127,-77,127,65,-86,-43,127,-127,-28,118,-47,-16,-7,75,-22,14,-75,26,-11,-98,83,-11, -127,18,-42,127,-79,-127,-127,-127,61,1,-21,35,-83,-113,-60,119,-116,-127,127,127,18,-127,-113,75,-127,127,19,81,-79,-20,-97,62,-127,78,127,-65,26,127,127,-85,-41,25,26,29,-46,-127,-71,-127,-4,-127,-127,127,40,74,51,-64,18,19,89,-40,-32,-40,-127,127,-17,-127,97,127,19,57,-111,-83,-22,51,-113,-127,125,127,107,-42,-67,-11,-89,68,-127,-107,127,127,127,127,-127,-127,-83,-66,112,127, 50,-21,80,56,2,-30,-1,47,-48,88,-83,62,11,-14,-127,76,27,-44,26,-6,-125,14,-82,-77,-3,-4,127,-19,127,96,24,-121,-15,-127,-12,127,-120,-8,-32,-47,-17,103,23,121,-43,-4,-7,-70,127,-79,-89,-12,61,-98,-127,24,78,-8,-127,74,-3,-60,13,50,127,-37,-52,-16,-65,-12,-53,-32,-108,-127,-10,-53,-3,-41,-127,-39,-74,-111,-24,127,-123,20,-13,-7,-39,-18,5,37,-15,127,28,-8, 
  /* [0][2][][] */ 24,-127,34,-15,17,15,37,55,-41,-56,-21,-43,17,-22,-29,51,3,12,3,46,-8,54,19,-53,23,69,-10,20,-36,25,8,17,-36,-35,-23,9,46,24,7,-18,-6,20,-10,-38,-35,-26,-18,-23,-17,31,-62,55,-14,-3,-44,-16,-17,-3,-20,20,-39,-8,51,-3,-38,52,-50,-21,29,1,0,71,-38,28,23,13,-47,-43,-33,-2,16,-12,-7,-34,-58,26,-33,-13,-102,29,1,14,-5,-5,15,-14, -45,9,127,-12,127,58,-24,5,-127,3,-94,-53,127,-32,-90,32,44,44,-14,-45,21,12,74,-5,76,-72,-13,60,-28,122,-11,6,-98,14,13,-36,73,36,28,-86,-23,-1,-127,-2,-34,-20,-53,-74,-2,-72,-106,111,99,-84,-38,-77,-12,127,-32,-18,83,-101,94,86,-32,26,-12,26,127,-15,-8,88,-92,20,-25,-63,-11,-88,-65,-32,0,-68,-22,-66,-79,127,35,4,82,53,58,24,-33,-22,4,-3, 9,70,26,-30,3,-12,-15,38,2,45,3,-11,4,-1,-1,49,-14,-4,-10,33,-23,51,10,-49,10,54,17,44,0,29,-12,-81,-57,-23,-17,-18,32,-27,7,-9,-11,-8,13,7,-61,-12,-16,-19,16,35,-41,29,-4,-23,7,10,12,4,-20,76,-26,5,32,-11,41,18,-56,15,16,-15,-6,93,14,-15,-15,6,-14,-9,-27,1,-6,-44,-7,-18,-30,28,-27,-10,-90,52,19,14,-4,-6,-13,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.010300143621861935, 0.0078447377309203148, 0.006043704692274332, 0.0081589464098215103, 0.011878418736159801, 0.013426168821752071, 0.011379220522940159, 0.0085191419348120689, 0.012194928713142872, 0.0070534250698983669, 0.0055300150997936726, 0.015728740021586418, 0.012936797924339771, 0.0052167121320962906, 0.0049986154772341251, 0.0060126348398625851, 0.0050017116591334343, 0.010158794932067394, 0.0070837852545082569, 0.0053416290320456028, 0.0076755494810640812, 0.010974308475852013, 0.0099996104836463928, 0.010382522828876972, 0.032973211258649826, 0.0079691028222441673, 0.010836324654519558, 0.0049654846079647541, 0.0078602759167551994, 0.0035743582993745804, 0.014268077909946442, 0.0092419339343905449, 0.007035168819129467, 0.0085544995963573456, 0.012875533662736416, 0.012419846840202808, 0.0080486033111810684, 0.011172720231115818, 0.013002334162592888, 0.0049706841818988323, 0.0087366998195648193, 0.01051942165941, 0.010530996136367321, 0.0048023494891822338, 0.0032149527687579393, 0.004067832138389349, 0.010909187607467175, 0.0048180404119193554, 0.008563164621591568, 0.0043462761677801609, 0.0041488907299935818, 0.0050510596483945847, 0.0087995771318674088, 0.0063493801280856133, 0.010001414455473423, 0.0070247165858745575, 0.0088426973670721054, 0.0097749577835202217, 0.0061976048164069653, 0.0058806096203625202, 0.0068857171572744846, 0.0065522445365786552, 0.0063882176764309406, 0.0047380635514855385, 0.0065238228999078274, 0.012135226279497147, 0.013309926725924015, 0.0082559073343873024, 0.0096735833212733269, 0.0086762038990855217, 0.01105046458542347, 0.0071272342465817928, 0.0041979877278208733, 0.0095887975767254829, 0.011746225878596306, 0.004712314810603857, 0.0058129625394940376, 0.0088270753622055054, 0.0052611948922276497, 0.012844936922192574, 0.01249715406447649, 0.0034753764048218727, 0.011886592954397202, 0.0088365692645311356, 0.0030964510515332222, 0.0087637342512607574, 0.0069893398322165012, 0.011161930859088898, 0.0086357872933149338, 0.0082422131672501564, 0.0048159067519009113, 0.019924141466617584, 0.011379776522517204, 0.010636791586875916, 0.0049303425475955009, 0.014142806641757488, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5005, 4027, 893, -1251, 4756, 9873, 8853, 1548, -348, 10866, 994, -3986, 3634, 3081, 443, -520, 3365, 8182, -583, 37, 5030, 12821, 12653, -1768, -3483, -823, 11324, -60, 1755, 1700, 8197, -1789, 8700, 2066, 3715, -4094, 922, -5970, 269, 1634, 2763, 1272, 1507, -413, 857, 2355, 4210, 3591, 4031, 2461, 6047, 1928, -2527, 1481, 1163, 1923, 1766, 3125, 7422, 1133, -1155, 5443, 3735, 4274, 4128, 8657, -3820, 2445, 7265, -622, 6340, 1718, 3314, 3367, 4307, 2542, -130, 2209, 2774, 2903, 2522, 3345, 7826, 585, 2125, 4299, 912, -1066, 13648, -404, 846, -1610, 9240, 3451, -4, -819, };
const TfArray<96, float> quant12_scale = { 96, { 0.00014653828111477196, 9.3936287157703191e-05, 0.00015541870379820466, 0.00018268938583787531, 0.00014900638780090958, 7.95609230408445e-05, 9.7740296041592956e-05, 0.00016748988127801567, 0.00014068862947169691, 7.4053234129678458e-05, 0.00019524306117091328, 0.00011286109656793997, 0.00013999904331285506, 0.00015472536324523389, 0.00018035127141047269, 0.00015012425137683749, 0.00018655584426596761, 9.4131377409212291e-05, 0.00010417510202387348, 0.00017958440002985299, 0.00012443900050129741, 7.0887319452594966e-05, 6.8623361585196108e-05, 0.00014794859453104436, 0.00016027703532017767, 0.00016688017058186233, 7.4860246968455613e-05, 0.00015358605014625937, 0.0001567267463542521, 0.00012729990703519434, 9.9514174507930875e-05, 0.00015004716988187283, 9.0423949586693197e-05, 0.00021514319814741611, 0.00018604098295327276, 0.00014506530715152621, 0.00013739318819716573, 0.00010194968490395695, 0.00013240780390333384, 0.00017200633010361344, 0.00015619986515957862, 0.00018609565449878573, 0.00022143550449982285, 0.0002071044291369617, 0.00030042565776966512, 0.00017222319729626179, 0.00013122656673658639, 0.00017238491273019463, 0.00014909329183865339, 0.00019863598572555929, 0.00011987334437435493, 0.00018545836792327464, 0.00015297844947781414, 0.00023108068853616714, 0.00020189075439702719, 0.0002051552728516981, 0.00018503319006413221, 0.00012690057337749749, 0.00010838695743586868, 0.00017320534971076995, 0.0001919570640893653, 0.00012646440882235765, 0.00015136986621655524, 0.00013829642557539046, 0.00013894608127884567, 9.1581809101626277e-05, 0.00015232033911161125, 0.00017510692123323679, 9.099334420170635e-05, 0.00022510331473313272, 0.00011529128096299246, 0.00013387858052738011, 0.00012046233314322308, 0.0001250619679922238, 0.00013202211994212121, 0.00010997971548931673, 0.00022821106540504843, 0.00016398575098719448, 0.000151451924466528, 0.00016384654736611992, 0.0001711799850454554, 0.00012733621406368911, 9.6503732493147254e-05, 0.00013568856229539961, 0.00015160176553763449, 0.00016174913616850972, 0.00017330283299088478, 0.00022403353068511933, 6.9261783210095018e-05, 0.00022641957912128419, 0.00021540536545217037, 0.00013743803719989955, 9.1486806923057884e-05, 0.00012606271775439382, 0.00020503332780208439, 0.00012526562204584479, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -59,50,-21,-23,-22,-44,-62,-20,59,-39,42,-55,83,-92,10,-127, 
  /* [1][0][][] */ -123,47,-111,-127,-75,12,-3,77,-40,2,117,-71,77,124,22,56, 
  /* [2][0][][] */ -45,3,-92,3,-17,-51,25,-55,-110,127,90,17,46,75,-49,125, 
  /* [3][0][][] */ -49,-67,6,-44,-90,18,-59,-127,-11,12,45,-79,-66,-33,-121,-37, 
  /* [4][0][][] */ 84,16,-17,51,-59,-6,-127,34,29,81,18,50,-6,10,-38,-74, 
  /* [5][0][][] */ -91,76,-107,-24,72,-61,-43,-77,125,-13,12,-33,24,-118,-127,-120, 
  /* [6][0][][] */ -18,-27,-33,19,-71,78,41,-28,-25,-50,127,-29,8,7,-124,3, 
  /* [7][0][][] */ -28,117,127,-74,65,92,4,-53,47,74,-87,-31,61,6,25,65, 
  /* [8][0][][] */ -50,1,54,-5,65,11,88,127,-72,-29,-82,-92,46,77,-73,-73, 
  /* [9][0][][] */ 30,43,127,40,-109,-46,-120,-114,91,30,114,27,-54,-100,57,-34, 
  /* [10][0][][] */ -19,-103,16,-69,-127,64,27,28,-38,-65,-8,27,-28,52,-117,24, 
  /* [11][0][][] */ 127,-50,-4,89,-106,-32,53,-23,126,102,-70,30,11,-93,-16,99, 
  /* [12][0][][] */ -74,-46,127,-2,49,-6,39,66,79,-19,102,55,-14,14,-83,45, 
  /* [13][0][][] */ -9,-33,18,27,2,0,127,36,-103,3,4,-2,-19,108,93,-56, 
  /* [14][0][][] */ 124,-79,127,-3,55,75,111,45,100,65,54,46,63,-56,52,-47, 
  /* [15][0][][] */ -19,127,12,-44,39,119,-74,76,-60,-15,-35,-11,-54,124,-26,-55, 
  /* [16][0][][] */ -47,66,123,-47,30,84,0,-14,-8,14,-26,41,85,-3,86,127, 
  /* [17][0][][] */ 10,111,66,-127,39,-24,-2,-65,-49,76,-22,38,-45,-29,86,-69, 
  /* [18][0][][] */ -80,2,-86,-105,127,101,-40,-84,60,87,123,85,-4,101,-56,-4, 
  /* [19][0][][] */ 56,127,84,71,58,-22,-9,-6,-16,125,37,122,67,68,-56,40, 
  /* [20][0][][] */ 94,-10,13,80,-86,-17,-35,46,-41,-46,-127,-50,86,-49,37,5, 
  /* [21][0][][] */ -121,-64,-18,108,-34,5,-127,75,-13,6,36,24,-38,53,-62,-4, 
  /* [22][0][][] */ 11,0,-87,-35,127,12,-50,72,65,70,54,71,-9,35,-10,38, 
  /* [23][0][][] */ -61,16,-29,3,21,56,106,87,-20,127,-26,-27,9,33,-62,-43, 
  /* [24][0][][] */ 25,-80,39,-8,127,30,64,-40,46,23,46,34,-66,34,-10,-25, 
  /* [25][0][][] */ 99,-61,99,19,18,-28,-12,97,101,-15,-45,-10,127,-38,74,55, 
  /* [26][0][][] */ 51,29,110,88,86,-15,-55,-23,18,77,-3,127,37,-75,17,-62, 
  /* [27][0][][] */ -49,15,-68,0,-21,96,41,-95,44,-93,127,0,61,-45,95,115, 
  /* [28][0][][] */ -49,44,-98,-122,22,-79,17,-55,-127,92,-58,21,-27,43,-34,94, 
  /* [29][0][][] */ 82,97,-69,35,42,96,-49,-22,52,57,10,59,-127,12,-43,79, 
  /* [30][0][][] */ -34,104,-127,-61,94,-29,15,22,-64,39,-66,-13,23,71,-19,126, 
  /* [31][0][][] */ 20,-121,92,39,71,-65,-97,38,-21,4,13,-42,-79,58,29,127, 
  /* [32][0][][] */ -61,65,1,29,-111,43,16,61,9,-127,27,-76,26,39,25,38, 
  /* [33][0][][] */ -72,-8,59,74,-7,11,-36,8,-38,-51,23,-24,-8,-9,-3,127, 
  /* [34][0][][] */ -7,16,-80,-88,57,-17,0,64,15,-3,1,-20,-57,-22,-43,127, 
  /* [35][0][][] */ 80,-14,35,-9,-3,14,-83,-19,-15,-127,-52,6,3,-29,47,-17, 
  /* [36][0][][] */ -7,26,-127,-19,31,123,-2,38,-25,13,56,22,7,22,-79,52, 
  /* [37][0][][] */ 65,38,55,-64,54,-127,52,-26,-126,55,-84,-47,22,29,114,49, 
  /* [38][0][][] */ -41,127,38,-43,50,31,72,-97,20,7,-125,32,-46,-108,-101,24, 
  /* [39][0][][] */ 95,47,-127,-107,-28,-23,15,-72,16,-7,6,-40,69,5,-110,-69, 
  /* [40][0][][] */ -28,14,-94,-101,-38,-9,17,-127,-1,-17,-8,-44,61,82,25,57, 
  /* [41][0][][] */ -38,-97,-10,127,-5,-15,-64,-10,-6,-56,71,-64,-72,-14,7,25, 
  /* [42][0][][] */ -29,53,-12,-127,18,11,2,-27,60,3,-44,16,77,-28,-24,10, 
  /* [43][0][][] */ 4,51,10,14,121,22,23,21,3,36,-8,-88,-127,-44,-8,-8, 
  /* [44][0][][] */ 76,-12,26,36,-27,-16,9,36,29,-23,27,-1,127,9,-48,-17, 
  /* [45][0][][] */ 8,-84,-51,39,-45,-100,15,51,21,-20,8,20,-84,127,34,-26, 
  /* [46][0][][] */ -20,-100,62,58,18,-14,-103,54,45,-49,40,-28,32,63,74,127, 
  /* [47][0][][] */ -29,-53,14,67,-2,1,59,17,15,-59,-127,-42,53,-28,-52,20, 
  /* [48][0][][] */ -92,92,-8,-26,2,62,-5,-127,25,-15,35,-64,49,-122,-62,1, 
  /* [49][0][][] */ -51,4,36,-31,6,13,112,127,-32,-32,-3,16,-37,33,-48,34, 
  /* [50][0][][] */ 49,21,-92,29,45,-115,-57,-11,-78,47,-40,16,7,-83,-127,-56, 
  /* [51][0][][] */ -37,38,-7,97,-43,26,-42,-70,-28,-78,11,-44,7,25,0,127, 
  /* [52][0][][] */ -127,-2,16,-2,22,58,67,7,21,-94,-49,-48,-104,-67,-117,-6, 
  /* [53][0][][] */ -49,-81,-50,-127,-30,4,5,80,45,-70,-48,23,-25,21,62,99, 
  /* [54][0][][] */ 6,-63,2,-3,-41,65,44,-8,-7,-79,62,32,-9,-15,-127,38, 
  /* [55][0][][] */ -15,-29,-35,26,68,-26,55,78,-64,-77,-127,-24,58,-43,-24,30, 
  /* [56][0][][] */ 68,-43,-45,-27,-119,19,-127,0,-8,-8,-40,14,96,-42,51,9, 
  /* [57][0][][] */ -55,10,33,-19,127,46,38,53,-17,57,-5,-16,-48,66,-96,-34, 
  /* [58][0][][] */ 35,0,-7,-23,30,-5,-46,-61,61,-127,-66,5,-62,-51,-25,63, 
  /* [59][0][][] */ -60,-40,-12,6,17,58,-92,-39,78,127,-82,7,-10,5,-19,0, 
  /* [60][0][][] */ 14,-54,8,24,-127,-57,28,10,-9,54,-13,44,-2,-34,34,50, 
  /* [61][0][][] */ 33,36,-96,-19,-44,-15,-127,-83,-3,9,29,104,83,-58,100,55, 
  /* [62][0][][] */ 48,-14,52,-11,-1,33,34,127,-50,126,32,89,29,41,68,95, 
  /* [63][0][][] */ 24,-120,-9,-12,-70,15,46,-19,-12,-24,1,-16,-29,127,107,29, 
  /* [64][0][][] */ -11,-8,-127,-45,28,56,33,-13,-10,-98,44,-8,75,-42,-70,101, 
  /* [65][0][][] */ -35,0,91,73,69,-22,92,95,-63,-7,-127,-85,30,119,-62,-17, 
  /* [66][0][][] */ -50,-125,8,-83,-46,-127,48,-22,-5,-25,28,69,-65,-41,-82,94, 
  /* [67][0][][] */ -22,-84,-95,-33,-78,116,-8,-127,-68,-22,-41,-96,22,-23,-66,37, 
  /* [68][0][][] */ 127,51,15,-22,-90,20,-57,-54,-106,-127,-30,4,33,-35,68,-80, 
  /* [69][0][][] */ 41,3,41,-28,-7,-49,-47,32,-16,127,-32,5,6,32,70,-26, 
  /* [70][0][][] */ 22,-11,-7,80,-115,20,4,-100,96,127,37,48,40,-64,-3,35, 
  /* [71][0][][] */ 127,-60,81,81,-72,-54,33,-45,112,21,-56,41,66,-62,25,17, 
  /* [72][0][][] */ 5,-50,35,110,42,11,-127,75,96,-6,38,11,-36,-68,-56,88, 
  /* [73][0][][] */ 63,18,64,-127,80,-100,-70,50,-29,120,-39,26,7,-89,28,-48, 
  /* [74][0][][] */ 80,16,48,49,-127,-30,49,11,-91,-40,9,-56,45,-70,13,10, 
  /* [75][0][][] */ 79,127,-114,27,59,53,-35,-24,-26,-30,53,79,-127,55,74,96, 
  /* [76][0][][] */ -67,-42,-6,-41,-42,3,77,1,-57,19,107,55,-53,-127,-21,82, 
  /* [77][0][][] */ -73,127,-17,-3,-64,-87,71,74,33,-54,-25,72,-34,68,-11,81, 
  /* [78][0][][] */ 127,27,-62,20,-68,26,-122,-7,1,8,-49,16,40,-100,19,74, 
  /* [79][0][][] */ -69,-40,127,55,-24,-98,-35,-56,-12,13,28,7,-64,97,-38,77, 
  /* [80][0][][] */ 66,93,25,-127,-9,30,79,-41,19,20,-41,13,71,-52,5,-1, 
  /* [81][0][][] */ 40,-65,13,-104,88,52,-10,127,106,27,-10,-49,-8,29,-76,-61, 
  /* [82][0][][] */ 63,33,89,-8,127,-107,12,42,4,101,-21,42,-16,-41,31,-89, 
  /* [83][0][][] */ -46,73,27,5,112,53,112,127,10,47,-27,-64,-82,87,-72,-106, 
  /* [84][0][][] */ 12,-108,-10,105,10,-96,-96,47,-85,71,-57,-2,-127,80,-17,-56, 
  /* [85][0][][] */ -108,51,-37,5,-13,-42,-57,-26,5,39,25,-73,-127,-92,-60,42, 
  /* [86][0][][] */ -12,62,104,122,28,-36,48,32,0,17,-55,-87,41,86,-127,-65, 
  /* [87][0][][] */ -17,40,127,-25,-100,-27,19,19,27,-22,10,38,-46,20,-10,-6, 
  /* [88][0][][] */ -35,-74,-114,28,34,36,-10,33,-20,-76,-110,-89,127,-13,16,34, 
  /* [89][0][][] */ 15,16,34,-127,17,-66,-53,65,111,-8,38,-108,17,-14,46,-62, 
  /* [90][0][][] */ -6,85,29,17,-30,42,46,127,-3,-54,-5,127,46,19,-45,79, 
  /* [91][0][][] */ -69,14,-9,57,89,43,-36,-127,-56,35,-11,22,-113,-123,-74,-16, 
  /* [92][0][][] */ -52,61,26,-15,-127,-10,-70,53,-32,56,104,60,-23,-34,79,20, 
  /* [93][0][][] */ 102,54,92,40,-127,-63,17,29,-23,-60,-34,-75,23,-44,-4,-13, 
  /* [94][0][][] */ -29,-127,23,-110,13,40,-15,-2,92,-24,-4,61,20,55,-42,39, 
  /* [95][0][][] */ -52,-63,-19,-64,114,108,-35,44,85,42,-62,50,-36,127,-92,32, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0019871080294251442, 0.0012738073710352182, 0.0021075294353067875, 0.0024773289915174246, 0.0020205762702971697, 0.0010788727086037397, 0.0013253910001367331, 0.002271218691021204, 0.0019077848410233855, 0.0010041865753009915, 0.0026475610211491585, 0.0015304341213777661, 0.0018984336638823152, 0.0020981275010854006, 0.0024456235114485025, 0.0020357349421828985, 0.0025297594256699085, 0.0012764529092237353, 0.0014126491732895374, 0.0024352243635803461, 0.0016874342691153288, 0.00096125568961724639, 0.00093055563047528267, 0.0020062322728335857, 0.0021734100300818682, 0.0022629508748650551, 0.0010151299647986889, 0.0020826780237257481, 0.0021252669394016266, 0.0017262292094528675, 0.0013494454324245453, 0.0020346897654235363, 0.0012261789524927735, 0.0029174135997891426, 0.0025227777659893036, 0.001967133954167366, 0.0018630975391715765, 0.0013824717607349157, 0.0017954939976334572, 0.0023324631620198488, 0.0021181222982704639, 0.0025235190987586975, 0.0030027392785996199, 0.0028084050863981247, 0.0040738722309470177, 0.0023354040458798409, 0.0017794759478420019, 0.002337596844881773, 0.0020217548590153456, 0.0026935702189803123, 0.001625522505491972, 0.0025148773565888405, 0.0020744388457387686, 0.0031335311941802502, 0.0027377060614526272, 0.0027819739188998938, 0.0025091117713600397, 0.0017208140343427658, 0.0014697633450850844, 0.0023487224243581295, 0.0026030018925666809, 0.0017148995539173484, 0.0020526258740574121, 0.0018753455951809883, 0.0018841552082449198, 0.0012418798869475722, 0.0020655146799981594, 0.0023745081853121519, 0.0012339000822976232, 0.0030524760950356722, 0.0015633882721886039, 0.0018154381541535258, 0.0016335094114765525, 0.0016958819469437003, 0.0017902640393003821, 0.001491361646912992, 0.0030946182087063789, 0.002223701449111104, 0.002053738571703434, 0.0022218138910830021, 0.002321257721632719, 0.0017267216462641954, 0.001308622770011425, 0.0018399821128696203, 0.0020557704847306013, 0.00219337223097682, 0.0023500442039221525, 0.0030379693489521742, 0.00093921285588294268, 0.0030703251250088215, 0.0029209686908870935, 0.0018637056928128004, 0.0012405916349962354, 0.0017094525974243879, 0.002780320355668664, 0.0016986436676234007, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -26272, -4885, 5906, -13238, 14471, -14294, 24840, -3963, 8599, -6674, 14639, 12505, -2701, -28386, -3121, 7369, };
const TfArray<16, float> quant14_scale = { 16, { 9.1185538622085005e-05, 5.8411464124219492e-05, 6.1978229496162385e-05, 5.7444722187938169e-05, 7.9285098763648421e-05, 0.00013785032206214964, 5.5858170526335016e-05, 7.2157024987973273e-05, 0.00011688778613461182, 9.4040769909042865e-05, 0.00011893222108483315, 7.7524971857201308e-05, 7.8819597547408193e-05, 9.0254769020248204e-05, 6.2152626924216747e-05, 7.5534662755671889e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 12,27,20,5,-21,-55,-14,-3,-23,-63,5,3,50,-64,50,28,-81,-29,25,9,72,30,-65,3,-12,62,127,66,15,73,55,-32,12,3,6,-16,32,34,-7,-13,98,24,29,-19,-6,-4,8,-44,28,-25,82,9,-57,-10,41,32,8,-36,16,17,-3,43,-52,-20,13,-2,54,32,8,-19,21,30,7,29,9,27,57,-26,40,19,-8,41,38,34,-46,-5,-10,71,22,13,-80,-23,26,3,95,67, 
  /* [1][0][][] */ 21,41,-52,-22,0,-51,99,-72,-68,-38,-59,-42,-17,-39,-3,-54,-36,-22,-32,-18,-19,-84,115,-37,3,13,1,54,-46,11,-32,14,-30,29,15,12,-14,57,-64,78,34,11,1,-52,56,-52,-10,31,-83,1,50,-100,-38,34,70,54,39,28,-71,13,-47,10,-14,-18,33,25,105,3,-39,-127,5,12,21,64,-19,33,-44,-29,102,-29,46,-9,52,-63,-22,-59,-19,12,-19,-42,29,-4,70,-49,-39,50, 
  /* [2][0][][] */ 15,-26,16,-8,67,49,-53,18,-57,40,11,-34,42,-5,12,39,30,-25,-127,-15,-13,-57,-13,29,4,-11,-54,22,-44,-27,-22,72,-23,-40,-10,12,-56,16,-19,-15,66,5,3,44,8,49,-4,-4,-92,0,-26,8,-32,56,6,-65,29,16,48,33,-21,-22,-25,70,36,-8,-35,-6,-12,0,-20,-42,26,48,24,68,-62,-7,-28,-37,31,35,55,-28,-17,-33,-18,-59,-23,-35,-10,65,-8,-8,90,-35, 
  /* [3][0][][] */ 37,-50,-30,-118,-14,-34,121,-37,24,120,-86,-24,0,-31,-31,64,62,45,-23,26,-46,17,23,12,-49,82,50,-3,-41,-21,-65,77,-7,-12,30,-18,-7,-54,-23,68,9,16,-27,35,61,-57,-5,39,55,-32,27,-45,114,41,23,-9,-4,-20,-8,-40,-38,29,70,-8,-30,-23,121,-36,-41,-9,-53,21,15,-82,0,-82,21,-41,127,-9,-6,-58,-36,-46,-43,-46,81,82,-45,49,-60,8,6,-95,-21,46, 
  /* [4][0][][] */ -23,85,32,18,-11,18,-47,-35,20,-28,6,-16,22,47,-27,27,-4,-49,-21,-81,26,-36,-66,17,-25,-32,-24,18,-46,127,-61,-26,10,-52,5,-36,69,44,-40,9,17,7,19,-47,-57,-13,60,-31,33,-16,-62,-14,-72,32,44,25,2,64,-29,15,-31,-71,-29,13,52,16,-69,-10,2,-7,7,-70,-8,73,64,74,-42,11,-64,46,17,67,34,-73,47,-64,-32,-70,-37,-55,-50,-22,-6,10,40,-40, 
  /* [5][0][][] */ -7,-6,40,-21,-10,-26,-19,12,42,6,-18,2,-24,-35,25,-22,-6,-1,-53,-33,-26,22,-19,4,17,-46,69,-26,-4,45,8,78,-3,-90,15,12,-32,-24,-35,4,-49,3,-25,12,2,26,-69,32,-15,12,56,-7,31,-83,6,15,-22,-52,4,-39,37,29,28,45,-34,16,106,-27,-6,-31,17,14,-7,27,40,12,-2,-15,127,44,-20,-17,-35,33,49,54,5,96,10,-37,-13,13,12,-9,-35,14, 
  /* [6][0][][] */ 31,-52,58,18,-46,101,-38,-101,-23,-71,-79,56,3,15,-28,91,7,24,12,-46,-81,-30,-81,-52,2,-51,-16,74,-127,45,-24,-38,36,77,-21,-3,-2,-46,20,-5,-70,29,33,-41,18,45,-102,-13,46,4,-84,-122,72,15,-47,-13,24,-37,24,-19,-15,-46,29,10,48,-78,-66,-54,-105,10,-18,-75,-26,-88,21,-91,75,15,-78,41,-35,78,26,-98,58,-34,-12,-9,-74,66,-74,87,35,-43,72,-104, 
  /* [7][0][][] */ -1,-10,-60,63,-36,-11,40,-9,-91,3,72,47,3,-47,-8,-30,-3,-2,6,-6,-50,-36,-36,-38,70,46,-13,69,-10,22,10,32,-55,-127,20,98,-5,5,-31,18,-16,-17,0,-69,21,44,56,80,-19,36,-51,-9,20,-35,35,-55,-20,23,-72,-16,54,-3,-3,-23,64,-50,98,-25,-65,-21,58,-9,-15,-26,-79,-22,24,-33,86,-31,-9,-16,-67,-38,38,22,-75,32,-16,12,2,36,53,-6,85,-5, 
  /* [8][0][][] */ -16,-56,19,-2,-9,-4,19,5,-14,-3,52,47,10,25,-35,-6,64,0,7,7,-13,-62,-35,-25,-22,-40,78,1,-11,52,11,-27,-10,4,4,4,-42,-9,12,-33,0,47,34,-36,17,-6,31,-13,38,6,51,11,-1,3,-34,4,-9,112,-57,-2,-9,-55,-53,-13,-81,-32,-17,23,-2,10,42,-16,-28,-127,46,-106,16,13,-55,16,-25,-2,-2,58,68,-63,-38,57,-33,93,17,-21,-44,-2,-7,-60, 
  /* [9][0][][] */ -22,-27,-36,27,3,18,8,31,-46,0,53,50,-27,61,23,-49,-15,35,-19,-49,4,33,-7,14,-24,29,2,19,29,-13,11,-5,-21,-25,3,57,-28,-13,27,4,-18,-30,13,-3,7,39,-5,37,-48,5,-19,25,123,25,-18,-2,14,-21,36,20,-30,-2,77,16,8,17,63,8,27,-2,-25,20,10,-127,-41,-122,-36,-9,38,-6,-9,27,7,-47,42,14,-61,-6,-9,108,39,26,46,40,-8,31, 
  /* [10][0][][] */ 26,36,8,3,-13,9,-38,-21,61,4,-36,19,20,13,-6,-50,-33,5,20,-5,24,-21,-20,-25,12,-15,-96,44,-24,44,-7,12,14,18,-20,5,11,-4,10,3,36,-11,49,-43,-33,-7,14,26,13,-4,8,-30,-25,-4,-8,30,-16,4,-14,-3,-10,-43,-11,17,-7,-18,-86,-29,-52,-16,40,-21,-15,30,29,16,43,-16,-86,8,-15,31,2,-10,6,13,-71,-127,-29,21,13,22,43,-25,22,31, 
  /* [11][0][][] */ 15,-48,13,4,-53,32,3,6,78,-16,-29,-49,34,12,4,-6,-30,58,35,-63,3,29,28,-30,46,13,69,0,27,-58,-24,18,20,104,-97,1,7,-24,57,12,-53,49,-22,26,-48,-8,-16,2,52,-19,-19,-15,-26,23,-83,96,-42,-3,-5,-32,28,-8,-8,-63,-7,-49,-127,-90,5,-33,-85,19,59,11,-6,-8,38,52,-112,-27,-20,0,-24,-12,-24,-3,64,86,24,-47,8,1,-35,20,73,40, 
  /* [12][0][][] */ 24,33,-37,-27,17,-25,8,37,46,-37,16,3,2,-12,-4,8,6,-42,-34,8,12,59,-2,50,-44,-31,-127,-8,70,-25,33,-7,-21,-78,66,-4,34,-16,-5,13,-7,-59,20,29,44,3,22,-19,-75,-5,-54,96,72,-27,32,-69,14,21,-35,-31,15,51,74,4,-20,-24,29,31,105,27,20,32,9,-20,-19,-4,-38,-50,42,-70,17,-49,36,-39,7,0,2,-109,-8,38,-38,14,16,72,16,43, 
  /* [13][0][][] */ -7,16,-81,31,27,19,-5,5,29,69,-42,33,-54,-23,56,-47,18,54,63,11,-26,-50,-5,21,40,50,-32,30,5,32,51,-13,-22,71,-9,40,18,-45,-45,-36,-1,-22,16,9,52,43,-41,49,-54,30,0,-7,-22,-37,52,33,5,-52,-8,-13,27,16,-2,-19,12,88,127,39,12,7,-52,-15,40,54,-84,58,15,-69,126,-41,-15,-40,31,0,21,58,-29,-29,-21,-33,5,50,35,24,66,51, 
  /* [14][0][][] */ -17,54,32,15,-61,-42,17,56,-80,-25,71,16,-80,-12,81,-26,-48,37,-63,30,-27,34,-102,5,-53,2,-47,-118,23,3,40,85,-56,35,20,-9,-19,-61,-12,-55,32,-30,54,-19,-7,54,-68,24,-12,-36,87,44,-10,20,-25,33,-46,38,4,43,45,73,-6,32,18,-48,3,-65,52,70,79,43,-56,37,11,14,36,-9,41,17,-70,122,-5,-127,89,-19,-2,17,-105,-14,-22,-8,-22,12,35,42, 
  /* [15][0][][] */ 78,-38,26,35,46,16,-22,-7,20,33,-56,-20,74,71,-5,-13,-10,12,-72,48,4,-33,17,37,63,-37,80,34,40,-40,-46,62,60,48,-4,-84,55,59,71,59,88,32,-16,1,-47,-127,29,-38,-33,-26,-22,-11,-15,-46,-37,52,-22,-1,-10,18,5,-62,-34,41,35,40,-78,34,-14,-32,-10,-7,5,-121,-47,-103,-31,14,-123,31,74,-36,53,21,-57,9,-10,-26,31,86,15,-68,-36,-30,40,-39, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0038753852713853121, 0.0024824871215969324, 0.0026340747717767954, 0.0024414006620645523, 0.0033696165774017572, 0.0058586383238434792, 0.0023739722091704607, 0.0030666734091937542, 0.0049677309580147266, 0.0039967326447367668, 0.005054619163274765, 0.0032948113512247801, 0.0033498329576104879, 0.0038358275778591633, 0.0026414867024868727, 0.0032102230470627546, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10812, -2394, -5297, 8097, -2241, -257, 959, -1209, 2561, -5006, -1142, -3474, 9878, -4251, -2329, -6678, 185, 900, -7657, -572, -2075, -475, -7723, -217, -7, 7501, -8870, -4829, -930, -2991, 39, -892, 16745, -782, -649, 1210, -498, 11595, 5644, 11938, -1008, 5102, -954, 5160, 882, 667, 13476, 3398, -5832, 770, -1431, -1789, 1007, -2887, 1085, 1637, 2622, 3543, 1005, 2339, 28, 1169, 236, 7833, 11580, 2200, 14046, 13272, -1572, 460, 12133, -2248, -158, 1439, -3699, 1194, 16975, 9565, 12749, 13155, 14459, -1239, 11465, 7388, -618, -724, 9861, -6412, 12023, -776, -7109, -3544, 159, 1272, 19598, -1457, };
const TfArray<96, float> quant16_scale = { 96, { 0.00010281829599989578, 0.00028304828447289765, 0.00016799717559479177, 0.00014075073704589158, 0.00016592071915511042, 0.00047444773372262716, 0.00010878200555453077, 0.00025759334675967693, 0.00031350136850960553, 0.00021550020028371364, 0.00027661700733006001, 0.00018195062875747681, 0.0001043781521730125, 0.0001385350915370509, 0.00021691495203413069, 0.00017211058002430946, 0.00024879685952328146, 0.000312616495648399, 0.00015987371443770826, 0.00032241683220490813, 0.00023075377976056188, 0.00025887403171509504, 9.3776259745936841e-05, 0.00020080823742318898, 0.0020941244438290596, 0.00016175927885342389, 0.0002453892957419157, 0.00016004756616894156, 0.00028856616700068116, 0.00019808973593171686, 0.00017807343101594597, 0.00026990505284629762, 6.7642606154549867e-05, 0.00043520177132450044, 0.00016421866894233972, 0.00017000867228489369, 0.00032836559694260359, 7.5093914347235113e-05, 0.00018068053759634495, 0.0001022631477098912, 0.00054857973009347916, 0.00020722372573800385, 0.00022526088287122548, 0.0001769782102201134, 0.00014200217265170068, 0.00025714526418596506, 9.5291186880785972e-05, 0.0002380047517362982, 0.00018490907677914947, 0.00031126473913900554, 0.00032484589610248804, 0.0002432240144116804, 0.00014735048171132803, 0.00032325251959264278, 0.00025941996136680245, 0.0002562591980677098, 0.00016387672803830355, 0.00039189710514619946, 0.00044668471673503518, 0.00027504129684530199, 0.00027824658900499344, 0.00031255578505806625, 0.00015980703756213188, 0.00011728003300959244, 0.00021884946909267455, 0.00034823821624740958, 0.00011603459279285744, 0.00011878670920850709, 0.00026645936304703355, 0.00039821877726353705, 0.00010589780868031085, 0.00026250752853229642, 0.00044035172322764993, 0.00017445949197281152, 0.00014466229185927659, 0.00021857823594473302, 7.6136297138873488e-05, 0.00014253062545321882, 0.00010931884753517807, 0.00014148034097161144, 7.0911446528043598e-05, 0.00026618008268997073, 8.908657036954537e-05, 0.00036202426417730749, 9.9016695457976311e-05, 0.00032118911622092128, 0.00013625386054627597, 0.00023991134366951883, 9.8643809906207025e-05, 0.00021805659343954176, 0.00012050946679664776, 0.00022538359917234629, 0.00028357110568322241, 0.00016298980335704982, 9.0742854808922857e-05, 0.00031524040969088674, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -34,-2,-8,-21,117,-1,23,-7,-7,6,-9,-18,-27,10,-6,-28,-17,3,-20,-17,-2,33,22,45,3,-16,-30,-7,26,-2,30,10,4,7,-16,-39,-1,-64,-46,8,7,4,40,-24,-24,33,-78,-20,-22,1,-21,60,-73,4,26,-7,-10,-13,1,-22,-7,-20,-7,-51,-29,-37,-48,-41,-2,20,7,6,33,-1,-6,-4,-10,-4,127,-37,-127,12,-113,-26,-28,-15,11,4,-39,-10,-3,-27,-3,33,-11,6, -26,38,36,-58,-31,3,127,-46,-1,-1,-36,18,-83,9,-81,81,-8,68,52,-27,-12,127,91,119,38,-5,39,80,127,32,127,-25,-95,-12,-100,-50,-19,-117,127,-48,-21,-127,-14,-37,69,-37,-58,-2,43,-3,21,127,-101,40,-87,-3,-78,-11,-10,24,-16,-127,-114,-76,-52,-2,-4,-121,-10,7,-77,127,-127,-16,13,-36,-127,-98,-3,-127,-108,4,4,-61,109,76,-70,34,-127,2,24,-5,11,126,-42,-81, -11,4,-12,-17,75,1,28,-24,-19,27,-7,7,5,11,-2,-39,-14,-7,-11,-18,-10,15,36,30,4,-8,-10,-21,15,8,25,14,13,5,-32,51,-2,-39,-44,30,5,9,24,-20,-23,-27,-61,-23,-21,-9,-16,40,4,-7,2,-10,47,-24,3,-28,-14,-13,-49,-1,-33,-44,127,-29,-2,18,-15,11,26,1,1,12,-16,16,-45,-34,-110,-2,-127,-17,8,-28,18,-16,-40,-29,4,52,5,26,-1,11, 
  /* [0][1][][] */ -82,4,40,-45,59,101,-46,-11,-6,-17,-17,-17,-127,35,18,77,-18,36,84,21,36,-20,127,-21,33,34,65,5,-9,-1,-6,-17,-127,-11,58,-29,-3,-127,-73,-127,-17,10,98,-30,-71,127,-127,-89,55,51,2,-31,-127,63,53,-22,10,-34,30,-17,17,-11,78,-70,-52,1,-30,-80,-4,-8,-125,19,74,127,13,-88,-108,-53,-70,-32,-80,-3,-40,-49,37,15,-124,46,-70,127,77,-77,127,4,-53,-6, 60,127,127,127,-127,-127,103,-48,127,127,-67,-54,-80,127,-20,127,127,-127,127,127,127,-86,123,-127,-127,-127,127,127,-121,127,-32,127,-105,127,127,-116,127,74,-5,-32,127,-5,-127,-100,127,-24,127,127,127,-127,127,-98,107,127,-127,127,-127,127,-127,127,-105,107,89,-127,127,127,-16,127,-112,-127,-23,-121,13,118,127,75,-2,-127,97,-118,26,127,114,127,127,61,-127,127,-99,50,-1,-15,-96,-30,-127,-29, -127,-20,34,-60,18,59,-65,3,-37,-13,5,127,-124,33,27,53,-24,38,70,13,12,-18,89,-19,36,17,36,-8,-6,-6,18,-10,-98,-26,63,127,0,-70,-95,-85,-25,-5,33,-34,-65,-78,-109,-125,39,57,-18,-18,120,5,83,-41,79,-32,44,-48,-3,-31,-127,-25,-85,-23,-59,-79,-13,8,-127,2,45,-104,9,127,-87,-36,-61,5,-127,-19,-72,-65,0,23,-93,39,-44,-69,127,127,-50,-30,-63,-7, 
  /* [0][2][][] */ -32,-29,-7,-25,41,0,-20,21,-14,6,34,-24,64,10,-9,-37,-3,-10,-52,-26,-16,-12,1,-14,6,-10,-6,7,-1,-5,-21,-4,24,1,8,-29,1,-52,-30,-36,-23,12,34,10,13,17,-81,-7,-18,-7,-33,-6,-20,-29,21,-7,-6,-23,1,-22,0,17,-3,2,-40,-33,119,11,32,22,-10,7,4,-12,-2,-38,-10,38,-38,-10,-9,6,-91,-12,-23,-3,62,-14,6,10,-17,-13,-18,-13,-28,0, -50,-50,39,-113,-36,0,36,127,-57,64,127,-16,-52,20,127,105,-9,-34,52,-57,-32,-28,97,13,27,-14,35,23,-16,4,-101,-48,-83,-29,-93,-9,-86,-107,32,-66,-25,-118,-33,127,21,-25,-48,-7,41,-16,-11,0,53,36,-47,-35,-56,-53,36,-55,127,23,99,15,-81,-51,-23,-60,127,29,-76,28,39,-25,24,-29,-28,-29,6,40,-72,-20,-78,-64,44,-127,16,15,-30,6,33,10,11,-127,-95,127, -39,14,-6,-15,37,-8,-8,19,-23,5,18,42,70,10,-2,-53,-7,4,-32,-25,-20,4,-18,-1,-1,-13,-13,-2,0,-1,-30,2,39,4,2,0,-9,-37,-43,-37,-27,-3,4,11,17,-15,-57,-4,-18,-13,-27,-7,-5,-34,22,-9,41,-16,7,-23,1,19,-15,5,-29,-36,-32,32,26,12,-34,4,-43,-47,-7,-18,-22,16,92,-6,-15,-5,-73,-2,-21,0,57,-3,-1,4,-10,23,-3,-25,-15,-2, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0046826745383441448, 0.012890925630927086, 0.0076511292718350887, 0.0064102392643690109, 0.0075565604493021965, 0.021607868373394012, 0.0049542807973921299, 0.011731625534594059, 0.01427785586565733, 0.0098145687952637672, 0.012598024681210518, 0.0082866139709949493, 0.0047537153586745262, 0.0063093318603932858, 0.0098790014162659645, 0.0078384671360254288, 0.011331005021929741, 0.014237556606531143, 0.0072811609134078026, 0.01468389481306076, 0.010509265586733818, 0.011789952404797077, 0.0042708711698651314, 0.0091454498469829559, 0.095373131334781647, 0.007367035374045372, 0.011175814084708691, 0.0072890785522758961, 0.013142227195203304, 0.0090216407552361488, 0.00811003427952528, 0.012292340397834778, 0.0030806609429419041, 0.019820481538772583, 0.0074790441431105137, 0.0077427392825484276, 0.014954821206629276, 0.0034200171940028667, 0.0082287704572081566, 0.0046573909930884838, 0.024984078481793404, 0.0094376318156719208, 0.01025910209864378, 0.0080601545050740242, 0.0064672338776290417, 0.011711218394339085, 0.0043398658744990826, 0.010839498601853848, 0.0084213512018322945, 0.014175993390381336, 0.01479452196508646, 0.011077200062572956, 0.0067108124494552612, 0.014721954241394997, 0.011814814992249012, 0.011670864187180996, 0.0074634705670177937, 0.017848249524831772, 0.02034345269203186, 0.012526260688900948, 0.012672239914536476, 0.01423479150980711, 0.0072781238704919815, 0.0053413081914186478, 0.0099671054631471634, 0.015859883278608322, 0.0052845869213342667, 0.0054099271073937416, 0.01213541254401207, 0.018136158585548401, 0.0048229251988232136, 0.011955433525145054, 0.020055027678608894, 0.0079454435035586357, 0.0065883840434253216, 0.0099547524005174637, 0.0034674906637519598, 0.0064913011156022549, 0.0049787303432822227, 0.0064434679225087166, 0.0032295342534780502, 0.012122693471610546, 0.0040572877041995525, 0.016487743705511093, 0.0045095374807715416, 0.014627980068325996, 0.0062054367735981941, 0.010926330462098122, 0.0044925548136234283, 0.0099309952929615974, 0.0054883868433535099, 0.010264690965414047, 0.012914735823869705, 0.0074230772443115711, 0.0041327201761305332, 0.014357057400047779, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1261, 6512, 119, 1641, 4351, 15628, 47, 2318, 9787, -936, 16072, 4165, 1535, 619, 4062, 217, 2548, 4435, -311, 10139, 1197, 7873, -1036, 1656, -8845, 1350, 2347, 1712, 5588, 1265, 3831, 2819, 1634, 12867, 4432, 4870, 2816, 2216, 4369, 2051, 16720, 1842, 1848, 1041, 2605, 8646, 7719, 8402, 1208, -648, 1817, 6239, 2985, -3599, 7655, 168, 2440, 10576, 1260, 1674, 2520, 12969, 3550, -452, 15968, 14963, 1635, 4170, 7690, 5226, 2684, 1162, -3253, 4733, 1816, 3165, 285, 10856, 3899, 7295, 2730, 899, 3973, 13894, 40, 8006, 5617, 1681, -819, 2466, 1186, 10616, 3921, 3643, 4608, 4275, };
const TfArray<96, float> quant18_scale = { 96, { 0.00025206728605553508, 0.00011137719411635771, 0.00024023104924708605, 0.00024014996597543359, 0.00015618001634720713, 5.9736281400546432e-05, 0.00026339915348216891, 0.00013092177687212825, 9.0128312876913697e-05, 0.00017202200251631439, 5.5250849982257932e-05, 0.00011463408009149134, 0.00018758636724669486, 0.00030458858236670494, 0.00012916339619550854, 0.00016150066221598536, 0.00023496719950344414, 0.00014207708591129631, 0.0001734092365950346, 8.6160769569687545e-05, 0.00021190126426517963, 9.8343305580783635e-05, 0.0002186082856496796, 0.00016008336388040334, 8.2914615632034838e-05, 0.00015733763575553894, 0.00019467473612166941, 0.00021164758072700351, 0.00014851873856969178, 0.00023509743914473802, 0.00016026028606574982, 0.00018310263112653047, 0.0002432872133795172, 6.4869273046497256e-05, 0.0001255160168511793, 0.00013208112795837224, 0.00019721438002306968, 0.00018212696886621416, 0.0001224115549121052, 0.000181388488272205, 5.4866097343619913e-05, 0.00016750463692005724, 0.00019932979193981737, 0.00015019632701296359, 0.00013949043932370842, 9.9643322755582631e-05, 9.0063200332224369e-05, 9.4874550995882601e-05, 0.00022141444787848741, 0.00029884566902182996, 0.00024229037808254361, 0.00010923213994828984, 0.00016618102381471545, 0.0001184520369861275, 9.7995871328748763e-05, 0.00032980646938085556, 0.00014140404528006911, 8.2143189501948655e-05, 0.00016928694094531238, 0.00015625008381903172, 0.00017140730051323771, 6.9012232415843755e-05, 0.00017423860845156014, 0.00017875561024993658, 6.0169939388288185e-05, 6.3351959397550672e-05, 0.00023793433501850814, 0.00014565356832463294, 9.9410703114699572e-05, 0.00010267638572258875, 0.00018279968935530633, 0.00016777218843344599, 0.00017712044063955545, 0.0001369742676615715, 0.00021171937987674028, 0.00020301061158534139, 0.00020484659762587398, 7.4047144153155386e-05, 0.00014957239909563214, 0.0001194475989905186, 0.00014973312499932945, 0.00017399781791027635, 0.00012152743147453293, 6.9700945459771901e-05, 0.0001446462410967797, 9.1247609816491604e-05, 0.00011909448221558705, 0.00022701622219756246, 0.00018036723486147821, 0.00021702366939280182, 0.00016474953736178577, 8.205787162296474e-05, 0.00013651759945787489, 0.00012152678391430527, 0.00012930808588862419, 0.00014505007129628211, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 46,9,3,53,-127,-20,84,43,54,74,-17,36,14,-4,33,81, 
  /* [1][0][][] */ -27,17,-88,6,127,92,-14,8,-37,19,-63,32,-55,76,-59,-46, 
  /* [2][0][][] */ -40,77,84,-5,80,111,16,31,44,-4,44,-14,72,-127,-15,18, 
  /* [3][0][][] */ 127,-23,11,2,31,43,-9,13,40,28,-48,-18,-48,45,-28,57, 
  /* [4][0][][] */ -97,-21,12,37,-107,-2,-79,-23,-14,44,-11,-36,-13,49,-45,127, 
  /* [5][0][][] */ -93,25,25,1,127,41,16,13,-37,28,-25,21,-55,56,-95,-26, 
  /* [6][0][][] */ -127,24,-46,26,-7,-76,79,14,13,-30,-56,51,16,2,-39,16, 
  /* [7][0][][] */ -10,123,83,-82,105,60,127,22,65,17,-15,47,124,43,-42,-2, 
  /* [8][0][][] */ -17,-25,-62,62,-46,81,-54,-60,41,-46,80,37,127,36,-93,5, 
  /* [9][0][][] */ -19,-127,-13,76,-39,-57,-14,59,47,36,4,58,-71,7,-3,-30, 
  /* [10][0][][] */ -33,-56,-83,72,-127,119,48,-83,39,-72,60,-53,57,117,-79,85, 
  /* [11][0][][] */ -47,-101,-41,19,-19,109,46,-8,24,-2,47,-104,15,109,-108,127, 
  /* [12][0][][] */ -28,-86,-100,83,-127,-125,38,56,86,54,-21,116,-10,-77,-15,-1, 
  /* [13][0][][] */ -67,-18,-34,-4,-13,-2,27,19,-23,127,-10,-26,33,36,10,-12, 
  /* [14][0][][] */ -127,-14,-29,-53,-26,82,-24,-103,119,-55,73,-5,80,-46,-78,-79, 
  /* [15][0][][] */ -1,-127,88,-49,-54,-34,2,59,12,-55,-87,-31,89,-35,-28,-38, 
  /* [16][0][][] */ -24,-34,29,-38,22,25,-16,-17,60,-127,40,-19,-9,4,-71,-86, 
  /* [17][0][][] */ -34,9,38,-58,16,-8,-51,5,97,-55,34,86,101,-74,-16,-127, 
  /* [18][0][][] */ 81,12,-41,-114,-8,-38,127,-52,18,51,-14,59,-12,70,6,-113, 
  /* [19][0][][] */ -45,-36,-17,-68,-106,39,-4,-8,2,-32,15,-127,-19,-21,-15,-11, 
  /* [20][0][][] */ 30,78,60,-96,60,-2,-40,77,-97,-127,37,-70,-36,110,-12,-7, 
  /* [21][0][][] */ 23,-89,-127,-5,79,29,78,87,-74,-91,-22,20,105,-98,-40,19, 
  /* [22][0][][] */ 71,-8,80,-6,1,-9,81,25,28,123,27,22,8,-4,127,-12, 
  /* [23][0][][] */ -121,-72,-36,63,72,54,13,10,-2,12,-4,-98,-2,59,55,127, 
  /* [24][0][][] */ 12,-18,22,29,24,-84,7,-51,20,127,-108,81,-26,-57,73,-76, 
  /* [25][0][][] */ 127,-53,98,102,49,18,-5,33,-114,86,57,-50,-3,32,68,-20, 
  /* [26][0][][] */ -22,22,6,43,-54,124,-21,40,-58,-35,-75,37,5,19,44,-127, 
  /* [27][0][][] */ 29,-9,-6,-47,-43,1,-93,19,-111,-17,-72,-53,-87,46,-29,127, 
  /* [28][0][][] */ -71,4,13,-2,24,-10,-127,16,-9,-40,3,-4,13,-43,-73,-20, 
  /* [29][0][][] */ -41,-122,-19,91,-22,5,127,9,72,69,-122,67,31,-28,-61,79, 
  /* [30][0][][] */ 54,-52,-66,-1,-127,18,62,-33,-8,5,-13,-13,-11,61,-32,58, 
  /* [31][0][][] */ -127,-10,16,87,-30,12,-42,0,-19,-48,13,-43,-20,-52,-22,86, 
  /* [32][0][][] */ -127,-74,-89,-13,-98,-46,12,-21,115,49,-54,-62,36,43,37,-7, 
  /* [33][0][][] */ 9,17,-98,41,-127,-94,51,-15,-110,19,-50,-62,-24,94,86,80, 
  /* [34][0][][] */ 22,54,23,19,-78,-38,50,21,0,-127,-27,28,-31,5,26,75, 
  /* [35][0][][] */ 35,-4,-55,-12,-127,16,91,-37,21,40,-13,-28,27,60,31,67, 
  /* [36][0][][] */ 6,8,-56,61,127,-21,30,63,-61,22,-71,-64,24,-20,3,27, 
  /* [37][0][][] */ -127,64,-5,-80,36,-102,-46,-40,-7,-40,-22,46,56,-87,19,-120, 
  /* [38][0][][] */ 21,89,41,-55,-104,-58,-127,-33,-64,-78,56,44,-79,-94,74,13, 
  /* [39][0][][] */ 17,-41,28,77,4,77,104,-72,-16,54,-3,-28,-6,127,61,121, 
  /* [40][0][][] */ 122,68,85,92,-58,-63,-9,15,-88,75,-15,-18,-50,-21,127,-2, 
  /* [41][0][][] */ -31,-17,14,48,-92,118,-7,62,-64,38,-111,6,10,38,46,-127, 
  /* [42][0][][] */ 10,-93,14,-9,127,34,63,18,-26,-97,-81,-25,-13,-4,-13,37, 
  /* [43][0][][] */ -36,-84,-49,4,127,22,-16,87,-63,-53,-117,-68,109,-10,-69,48, 
  /* [44][0][][] */ -51,-69,-56,-84,23,47,66,25,-47,-127,-77,76,-47,53,34,103, 
  /* [45][0][][] */ -10,-61,-56,-12,-127,61,-26,-66,47,-49,15,-60,1,9,-35,45, 
  /* [46][0][][] */ 38,-88,-31,-1,91,-85,-25,120,-5,-41,57,73,-72,-72,72,-127, 
  /* [47][0][][] */ -97,-31,-17,86,-5,17,33,37,-1,127,68,74,-36,71,-8,114, 
  /* [48][0][][] */ 43,-9,-92,-90,37,-60,6,54,48,-77,3,29,-62,8,-46,-127, 
  /* [49][0][][] */ 45,34,6,22,-1,-20,45,48,-29,127,-37,37,-41,-21,57,68, 
  /* [50][0][][] */ 2,-6,18,16,-127,-24,-16,-33,48,21,26,52,-21,-52,13,-3, 
  /* [51][0][][] */ 10,-13,-25,-127,-34,92,47,-34,-2,-6,44,-56,70,90,-36,29, 
  /* [52][0][][] */ 17,-27,-2,-96,90,-104,-10,-33,38,5,127,-63,32,6,-42,90, 
  /* [53][0][][] */ -52,-64,49,-27,-28,-127,19,-100,-12,100,-102,75,-38,-9,23,-77, 
  /* [54][0][][] */ 73,79,34,-22,-127,-30,-91,-103,1,14,64,69,-84,-49,58,17, 
  /* [55][0][][] */ 20,13,-31,73,-36,25,39,-17,11,127,24,52,3,-4,5,46, 
  /* [56][0][][] */ 51,-109,-55,80,-62,30,-13,63,127,23,46,61,-28,-34,54,70, 
  /* [57][0][][] */ 21,44,102,-100,75,-13,-18,0,77,-30,16,127,44,-47,117,-49, 
  /* [58][0][][] */ 62,-43,12,-77,41,20,7,127,44,96,-6,50,50,23,72,0, 
  /* [59][0][][] */ -34,38,27,-44,-6,-84,-10,0,1,18,-106,-88,-127,-50,78,-14, 
  /* [60][0][][] */ 48,-14,22,16,14,-20,16,-47,27,127,-4,68,-5,-30,-18,-26, 
  /* [61][0][][] */ 49,56,30,-12,-85,-127,-17,-52,-56,-14,-25,9,-55,-29,94,87, 
  /* [62][0][][] */ -30,81,-39,33,-46,127,-42,22,-63,14,-48,25,-34,43,51,-93, 
  /* [63][0][][] */ 38,-3,-66,-127,-20,-52,96,-18,0,-101,-38,39,-33,75,42,-33, 
  /* [64][0][][] */ -34,30,-1,-12,45,-47,34,69,-127,-17,-58,-38,-20,94,42,68, 
  /* [65][0][][] */ -63,1,-53,-29,73,51,-55,-85,-122,-53,8,-42,-127,113,-81,42, 
  /* [66][0][][] */ -17,58,-10,35,-40,127,-24,23,-59,19,-28,35,-33,49,40,-78, 
  /* [67][0][][] */ 27,-19,-43,-38,0,-93,67,-113,1,22,14,124,-59,-41,-14,-127, 
  /* [68][0][][] */ 9,-127,-23,93,-8,6,13,97,58,43,65,4,-85,29,-13,0, 
  /* [69][0][][] */ 18,87,83,-104,70,-3,-42,127,37,111,72,86,107,-103,27,-119, 
  /* [70][0][][] */ 71,32,66,-46,127,2,-116,-58,-125,-89,-21,55,-40,61,-114,-25, 
  /* [71][0][][] */ -13,-71,13,-55,78,4,45,30,-70,71,-127,-52,18,77,-37,36, 
  /* [72][0][][] */ 4,24,44,-3,-54,-16,-88,-64,-15,68,-25,50,18,109,-127,-10, 
  /* [73][0][][] */ 5,-47,-22,-46,45,-115,36,-46,83,92,111,-11,30,-27,-75,127, 
  /* [74][0][][] */ 0,1,-27,71,-79,2,88,29,73,59,32,111,127,20,-54,16, 
  /* [75][0][][] */ -24,40,-28,30,-49,127,-16,21,-25,20,-35,41,-11,41,25,-64, 
  /* [76][0][][] */ -81,94,-71,40,-116,7,-7,27,58,48,-39,-48,47,-47,-127,36, 
  /* [77][0][][] */ 98,108,-127,126,76,68,63,62,35,6,119,-43,66,45,54,34, 
  /* [78][0][][] */ 14,-37,3,-65,79,-123,39,-55,49,48,118,-31,15,-16,-49,127, 
  /* [79][0][][] */ -42,65,2,19,-12,-46,-28,-8,-127,-16,48,2,98,36,-69,-37, 
  /* [80][0][][] */ -70,29,67,8,63,53,6,-127,-89,48,-67,-40,5,-80,26,76, 
  /* [81][0][][] */ 84,68,-27,-3,37,-28,79,108,-113,127,-69,-34,-46,31,113,127, 
  /* [82][0][][] */ 61,98,-30,-53,-17,-39,101,-90,32,9,-57,71,127,-18,74,-42, 
  /* [83][0][][] */ -1,-35,24,24,7,21,-39,-96,58,-22,89,14,27,-59,-54,-127, 
  /* [84][0][][] */ -127,-83,-22,-22,-13,75,85,3,59,61,70,84,56,88,-76,7, 
  /* [85][0][][] */ 127,-7,96,-80,88,4,-14,86,37,119,-66,18,-25,61,114,6, 
  /* [86][0][][] */ -81,84,-39,-5,42,95,21,15,107,52,127,-32,-27,64,-16,-35, 
  /* [87][0][][] */ 11,-64,31,-45,44,-127,29,-30,47,-13,69,-36,39,-45,-40,73, 
  /* [88][0][][] */ -85,62,51,-4,108,-40,45,17,-67,-82,93,-79,77,127,107,-125, 
  /* [89][0][][] */ -28,37,-18,24,-28,127,-21,30,-48,15,-42,17,-12,56,24,-86, 
  /* [90][0][][] */ 60,-83,35,26,123,-15,43,32,-2,-94,-127,-26,-22,-9,-52,26, 
  /* [91][0][][] */ -15,64,-13,-53,-1,-79,-100,45,-77,20,-115,-127,-123,-81,7,21, 
  /* [92][0][][] */ 68,51,58,30,-127,-93,15,7,-18,33,-23,-35,-31,-91,23,-7, 
  /* [93][0][][] */ 3,-125,-127,53,-33,-35,1,114,82,64,1,71,-49,65,-33,-33, 
  /* [94][0][][] */ 110,14,122,-18,19,-33,20,38,33,78,4,61,20,0,127,-4, 
  /* [95][0][][] */ -60,-38,-8,-22,127,-7,31,71,-24,-2,-103,-55,10,19,-62,24, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0046051675453782082, 0.002034816425293684, 0.0043889242224395275, 0.0043874429538846016, 0.002853345824405551, 0.0010913577862083912, 0.0048121963627636433, 0.0023918880615383387, 0.0016466078814119101, 0.0031427724752575159, 0.0010094107128679752, 0.0020943183917552233, 0.003427127143368125, 0.0055647105909883976, 0.002359763253480196, 0.0029505519196391106, 0.0042927558533847332, 0.0025956910103559494, 0.0031681167893111706, 0.0015741224633529782, 0.0038713505491614342, 0.0017966924933716655, 0.00399388512596488, 0.0029246583580970764, 0.0015148165402933955, 0.0028744952287524939, 0.0035566289443522692, 0.0038667158223688602, 0.0027133773546665907, 0.0042951353825628757, 0.0029278907459229231, 0.0033452112693339586, 0.004444759339094162, 0.0011851354502141476, 0.0022931268904358149, 0.0024130688980221748, 0.0036030272021889687, 0.0033273862209171057, 0.0022364098113030195, 0.0033138946164399385, 0.0010023814393207431, 0.003060242161154747, 0.0036416747607290745, 0.0027440262492746115, 0.0025484340731054544, 0.0018204433145001531, 0.0016454183496534824, 0.0017333198338747025, 0.0040451525710523129, 0.005459789652377367, 0.0044265473261475563, 0.0019956270698457956, 0.0030360601376742125, 0.0021640709601342678, 0.0017903450643643737, 0.0060254312120378017, 0.0025833947584033012, 0.0015007229521870613, 0.003092803992331028, 0.0028546259272843599, 0.0031315421219915152, 0.0012608256656676531, 0.0031832691747695208, 0.0032657929696142673, 0.0010992805473506451, 0.0011574147501960397, 0.0043469644151628017, 0.0026610319036990404, 0.001816193456761539, 0.0018758561927825212, 0.0033396766521036625, 0.0030651302076876163, 0.0032359189353883266, 0.0025024646893143654, 0.0038680275902152061, 0.0037089218385517597, 0.0037424648180603981, 0.0013528114650398493, 0.0027326273266226053, 0.0021822594571858644, 0.0027355637867003679, 0.0031788698397576809, 0.0022202571853995323, 0.0012734081828966737, 0.0026426285039633512, 0.0016670570475980639, 0.002175808185711503, 0.0041474946774542332, 0.0032952367328107357, 0.0039649349637329578, 0.0030099076684564352, 0.0014991641510277987, 0.0024941214360296726, 0.002220245311036706, 0.0023624065797775984, 0.0026500062085688114, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -5932, 10431, -19168, 2195, 10215, -14159, -38216, -7545, -8684, 8841, -15939, -14673, 7533, -10401, -3868, -2200, };
const TfArray<16, float> quant20_scale = { 16, { 0.00015931458619888872, 0.00012343401613179594, 0.00017467810539528728, 0.00015766898286528885, 0.00010203043348155916, 0.00014892108447384089, 9.0519948571454734e-05, 0.00012524222256615758, 9.8445751063991338e-05, 9.9940611107740551e-05, 0.00017394522728864104, 0.00015272948076017201, 0.00013701486750505865, 8.6419706349261105e-05, 0.00014483692939393222, 0.00012607462122105062, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 25,35,17,-26,77,72,-41,55,-13,117,6,48,-37,36,-18,45,36,86,47,-62,-66,81,-8,58,51,50,40,57,-44,-47,-7,86,-30,6,-66,54,48,-127,-30,18,16,-36,60,-12,-8,-58,-63,-15, 
  /* [1][0][][] */ -48,1,-80,-42,12,91,-53,18,-14,-34,-42,32,56,-17,-27,-24,-27,-30,-2,16,-61,43,-99,-45,-51,-38,44,70,-22,-30,40,-41,13,-55,-32,48,14,-58,127,-35,-22,31,-43,-13,32,54,27,16, 
  /* [2][0][][] */ -1,0,53,-30,-21,-77,20,25,90,74,-58,16,107,-44,127,79,-70,-20,-27,30,82,-78,-37,-92,8,-38,29,-67,34,41,-35,12,29,-22,58,36,-64,7,3,-31,32,32,58,-17,21,-77,92,-56, 
  /* [3][0][][] */ 40,6,-24,-30,32,110,16,-16,44,-53,25,-27,-54,10,11,43,-47,-70,40,-120,-11,-1,-25,-18,-42,88,127,67,-12,-46,31,39,61,-27,98,35,-47,-60,-2,37,26,17,-15,-4,19,19,-9,-24, 
  /* [4][0][][] */ 91,-4,13,-52,91,87,43,11,61,-12,-104,34,46,-22,6,-18,-84,-111,-25,-92,-28,26,-40,-32,-72,127,-92,119,-65,-48,20,75,43,-51,11,-27,-2,16,-18,37,-43,-12,-8,58,-50,99,-30,-46, 
  /* [5][0][][] */ 1,-5,-53,3,-16,51,20,-27,62,50,35,85,52,-22,34,-2,-43,127,-16,34,6,-1,-65,-18,36,-2,-63,-35,-18,28,19,-19,-36,-2,37,15,-47,8,-88,2,88,-17,27,50,-18,8,-42,30, 
  /* [6][0][][] */ 60,19,17,73,10,-27,98,-50,-1,62,127,102,46,42,-57,61,45,-43,-75,79,50,-66,-44,55,-86,84,90,-8,117,50,-35,6,91,-58,-123,-10,93,33,7,0,10,53,53,-32,66,117,32,-2, 
  /* [7][0][][] */ -96,-9,-23,21,-65,-59,24,50,86,114,-57,-79,-101,15,-13,-21,-87,107,1,120,-57,42,27,34,-21,-99,-39,-82,28,41,-2,8,-20,6,13,-20,1,-53,127,10,6,41,20,-10,54,77,-30,-3, 
  /* [8][0][][] */ -16,-92,57,-61,71,-59,77,-46,-30,-121,32,14,-33,-1,29,31,2,9,-44,112,11,44,-25,34,71,-8,-62,-38,-127,-21,-68,-117,12,-60,6,91,-10,43,122,20,18,2,80,123,-6,-81,-48,89, 
  /* [9][0][][] */ 18,-43,22,-70,38,79,-36,51,13,-37,-33,-15,22,-46,117,-17,7,-121,35,40,-74,37,56,-41,-28,-83,-30,81,55,81,-36,-27,-56,27,-11,127,-27,-47,-60,-27,-33,-1,32,115,58,91,-69,13, 
  /* [10][0][][] */ -15,18,-24,-9,20,24,-62,-41,48,38,65,-7,-34,-8,52,-50,-62,127,0,49,3,-12,18,32,-45,43,3,94,37,6,-32,-9,70,11,-5,25,-9,-50,-37,18,-85,1,25,-14,21,46,30,31, 
  /* [11][0][][] */ -31,47,-19,40,34,59,-1,6,16,20,-127,-68,72,15,-12,-47,0,29,-38,-43,-9,-4,103,6,50,13,-14,37,-9,28,-10,45,31,-10,-44,3,44,81,105,25,33,-26,64,2,-59,-20,84,6, 
  /* [12][0][][] */ -68,-1,31,27,-62,-55,4,3,-42,-37,-127,16,77,-101,20,33,48,105,86,-127,-29,39,-44,-85,-6,-24,34,-33,13,20,-20,80,64,82,38,-37,-60,-23,35,-6,-37,19,60,-1,36,-14,-38,-41, 
  /* [13][0][][] */ -58,-119,-50,-107,4,19,61,15,-127,27,126,-63,51,49,124,3,118,23,-3,-101,75,-86,118,3,-83,5,-28,9,-48,-99,-107,12,43,-31,-75,58,27,-60,82,-80,-10,57,68,45,62,-25,109,-71, 
  /* [14][0][][] */ 71,19,-57,15,-36,19,-86,-28,-32,57,61,52,-10,-70,11,-44,56,-114,27,8,98,-59,23,-4,-15,125,-86,7,-53,-28,-89,4,127,43,92,-22,-84,16,-20,54,-17,-46,106,-30,-58,-47,-59,56, 
  /* [15][0][][] */ -66,12,40,15,91,0,5,37,21,79,-18,56,54,-13,-33,-15,9,36,2,-38,25,-40,-50,-52,50,-66,-39,64,-36,4,17,10,-60,2,127,-7,-87,10,54,-17,-48,-21,18,-3,-32,-28,-12,5, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.006770869717001915, 0.0052459458820521832, 0.0074238195084035397, 0.0067009315825998783, 0.0043362933211028576, 0.0063291457481682301, 0.0038470977451652288, 0.0053227944299578667, 0.0041839443147182465, 0.0042474758811295033, 0.0073926718905568123, 0.0064910030923783779, 0.005823131650686264, 0.0036728375125676394, 0.0061555691063404083, 0.0053581711836159229, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 15074, -810, 18596, 59, 16386, -2288, 37855, 454, 9999, 32048, 1663, 23189, 1968, 13927, 33322, 21670, 326, -4977, 1885, 43930, -254, 20212, 1373, 16747, 17047, 31834, -293, -557, 732, 14866, 20307, 11, 65, 478, 1581, 15698, 10449, 26444, 2188, 17887, 28523, 920, 624, 16326, -729, -837, 41773, 24625, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6957130406517535e-05, 9.3196751549839973e-05, 6.6640728618949652e-05, 0.00011121029092464596, 9.8492899269331247e-05, 8.5396131908055395e-05, 4.698949123849161e-05, 0.00024607361410744488, 9.5984287327155471e-05, 6.7092259996570647e-05, 6.9831221480853856e-05, 0.00010157503857044503, 7.3160612373612821e-05, 8.1180718552786857e-05, 5.0387719966238365e-05, 8.9180095528718084e-05, 9.1580201114993542e-05, 8.7344218627549708e-05, 0.00015654347953386605, 4.9805930757429451e-05, 7.8184726589825004e-05, 5.9622510889312252e-05, 0.00010269549238728359, 9.6204879810102284e-05, 6.4152212871704251e-05, 7.5322066550143063e-05, 7.1543327067047358e-05, 4.4578231609193608e-05, 0.00027416920056566596, 9.5727045845706016e-05, 6.8516310420818627e-05, 0.00026502955006435513, 0.00012359922402538359, 0.00019211307517252862, 8.2509635831229389e-05, 7.6982687460258603e-05, 9.0770423412322998e-05, 6.730006862198934e-05, 9.2630471044685692e-05, 9.346841397928074e-05, 5.0592843763297424e-05, 0.00014583743177354336, 0.00037720173713751137, 6.8320958234835416e-05, 0.00014677390572614968, 6.6978609538637102e-05, 4.8717374738771468e-05, 5.9100486396346241e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -97,71,-127,95,-100,62,-47,78,-79,-67,62,-49,53,-84,-34,-61,69,74,88,-97,93,-109,72,-83,-96,-50,61,124,-96,-36,-75,54,68,-88,81,-114,-74,-95,83,-49,-19,-103,127,-115,108,59,-95,-44, -127,101,-77,114,-89,124,-53,124,-113,-92,89,-75,90,-105,-67,-84,105,111,127,-127,105,-127,85,-127,-98,-85,83,127,19,-81,-88,127,89,-127,112,-108,-94,-127,112,-105,-119,115,109,-127,-35,107,-116,-79, -68,66,-8,38,-22,65,-26,26,-48,-37,42,-23,33,-60,-33,-6,46,49,69,-45,41,-55,30,-54,-69,-28,24,21,77,-29,-46,86,37,-75,49,-29,-43,-26,40,-49,-122,-33,26,-53,-68,63,-48,-53, 
  /* [0][1][][] */ -98,91,-64,106,-67,105,-109,104,-100,-98,82,-87,73,-118,-76,-89,93,96,-48,-78,114,-122,99,-80,-111,-87,86,103,-127,-79,-101,47,100,29,96,-117,-100,-102,99,-66,-127,-113,116,-116,127,65,-93,-71, -120,127,-103,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-50,-104,127,-125,127,-120,-127,-127,127,125,5,-127,-127,117,127,40,127,-127,-127,-97,127,-127,-126,127,113,-105,-55,127,-127,-127, -81,71,-81,51,-61,35,-57,29,-49,-44,50,-47,43,-60,-53,-6,64,53,-39,-36,46,-63,41,-55,-117,-40,43,48,85,-70,-69,76,51,10,54,-49,-52,-14,56,-52,-57,-68,30,-36,-88,67,-30,-80, 
  /* [0][2][][] */ -52,47,7,42,-32,43,-66,24,-43,-37,26,-45,41,-73,-34,-54,43,41,-70,-18,27,-44,40,-42,-50,-34,38,-3,-80,-59,-41,52,53,46,48,-61,-40,-54,24,-44,-104,-44,52,-97,79,36,-37,-63, -70,74,-75,56,-74,48,-82,49,-65,-43,47,-65,65,-69,-58,-43,69,43,-81,-22,30,-52,41,-61,-68,-50,44,28,2,-92,-68,64,50,65,65,-51,-54,-39,36,-64,-54,70,32,-110,-22,67,-49,-87, -25,34,-68,12,-47,7,-52,9,-6,-14,22,-23,25,-23,-26,15,36,16,-55,0,17,8,17,-17,-51,-18,19,18,58,-39,-31,48,25,36,35,-13,-22,10,12,-21,-2,-25,-2,-28,-44,34,-12,-60, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036956779658794403, 0.003960861824452877, 0.0028322308789938688, 0.0047264373861253262, 0.0041859480552375317, 0.003629335667937994, 0.0019970533903688192, 0.010458128526806831, 0.0040793321095407009, 0.0028514210134744644, 0.0029678267892450094, 0.004316939041018486, 0.0031093258876353502, 0.0034501804038882256, 0.0021414780057966709, 0.0037901541218161583, 0.0038921583909541368, 0.0037121293134987354, 0.0066530974581837654, 0.0021167520899325609, 0.0033228506799787283, 0.0025339566636830568, 0.0043645584955811501, 0.0040887072682380676, 0.0027264689560979605, 0.0032011878211051226, 0.0030405912548303604, 0.0018945748452097178, 0.011652191169559956, 0.0040683993138372898, 0.0029119432438164949, 0.011263756081461906, 0.0052529666572809219, 0.0081648053601384163, 0.0035066595301032066, 0.0032717641443014145, 0.0038577429950237274, 0.002860252745449543, 0.0039367950521409512, 0.0039724074304103851, 0.0021501958835870028, 0.0061980909667909145, 0.016031073406338692, 0.0029036407358944416, 0.0062378905713558197, 0.0028465907089412212, 0.0020704884082078934, 0.0025117706973105669, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2010, -1063, 822, -2108, 4172, -718, 3685, -3368, 1327, 498, 2262, 4648, 379, -444, 677, 4623, -1767, 2907, 5228, 838, -896, 2347, -1027, 4630, 1764, 1864, 1126, -940, 8693, -372, 2496, -2080, -859, 3620, -1057, 2027, 1752, 775, 313, 4702, 2095, 8151, -4640, 1674, 7247, 72, 1952, 2769, };
const TfArray<48, float> quant24_scale = { 48, { 0.00021458863920997828, 0.00030292660812847316, 0.00027453244547359645, 0.00022459460888057947, 0.00018356858345214278, 0.00019841760513372719, 0.00019294775847811252, 0.00016432533448096365, 0.0002301472268300131, 0.0002937803219538182, 0.00019318608974572271, 0.0001678985427133739, 0.00030937648261897266, 0.00030092589440755546, 0.00023799168411642313, 0.00016809396038297564, 0.00023499671078752726, 0.00026731475372798741, 0.00016791124653536826, 0.00028173712780699134, 0.000284051668131724, 0.00023077466175891459, 0.00018893384549301118, 0.00017236455460079014, 0.00022629616432823241, 0.0002281229681102559, 0.0002823701361194253, 0.0002368525747442618, 0.00010895773448282853, 0.00027873599901795387, 0.00018198821635451168, 0.00016322777082677931, 0.00018522911705076694, 0.00021338890655897558, 0.00022681424161419272, 0.00026292412076145411, 0.00023255014093592763, 0.00027262992807663977, 0.00021959656442049891, 0.0001681320572970435, 0.00025278559769503772, 0.00010885462688747793, 0.00012544021592475474, 0.00025314203230664134, 0.00011845210974570364, 0.00022962225193623453, 0.00027115322882309556, 0.00021599572210106999, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 65,33,127,-31,63,108,-77,-48, 
  /* [1][0][][] */ 10,-86,-127,8,49,27,30,1, 
  /* [2][0][][] */ -127,-5,-43,-22,50,26,-75,-41, 
  /* [3][0][][] */ 44,76,127,-74,-14,-114,-9,-10, 
  /* [4][0][][] */ -127,25,-55,-25,49,4,-41,-56, 
  /* [5][0][][] */ -101,25,-49,-5,4,40,-81,-127, 
  /* [6][0][][] */ -39,-127,-116,46,102,10,9,48, 
  /* [7][0][][] */ -68,-127,-104,-86,-70,-67,15,90, 
  /* [8][0][][] */ 95,29,-13,-10,107,-88,-127,9, 
  /* [9][0][][] */ -34,46,-54,89,-61,-35,127,-33, 
  /* [10][0][][] */ -24,127,41,59,121,-24,-4,59, 
  /* [11][0][][] */ -82,-37,-20,-3,-78,99,127,-6, 
  /* [12][0][][] */ 65,39,-127,33,-11,-34,-70,-10, 
  /* [13][0][][] */ 59,-27,-69,9,11,-127,-34,-21, 
  /* [14][0][][] */ 12,-77,72,10,127,-104,-62,15, 
  /* [15][0][][] */ -35,-43,1,127,61,78,-78,23, 
  /* [16][0][][] */ 110,31,-29,13,76,-112,-127,-21, 
  /* [17][0][][] */ 58,127,53,76,42,66,27,-83, 
  /* [18][0][][] */ 38,-16,3,5,127,5,34,-15, 
  /* [19][0][][] */ 9,127,36,14,-120,17,22,-36, 
  /* [20][0][][] */ -42,24,67,-127,17,26,-12,107, 
  /* [21][0][][] */ -31,74,44,-127,32,41,-4,114, 
  /* [22][0][][] */ -73,-63,-88,18,-123,127,107,-20, 
  /* [23][0][][] */ 99,39,-127,22,9,-49,-75,-13, 
  /* [24][0][][] */ -44,44,12,-3,-9,65,-127,105, 
  /* [25][0][][] */ -103,-55,-127,12,-57,-64,63,101, 
  /* [26][0][][] */ 43,-8,-38,-33,104,-13,127,-37, 
  /* [27][0][][] */ 127,-74,30,98,-3,35,-24,93, 
  /* [28][0][][] */ 35,60,46,-20,127,-64,53,-32, 
  /* [29][0][][] */ -15,-15,-19,-41,-60,15,127,-36, 
  /* [30][0][][] */ 47,-127,-50,-78,-116,-3,10,-52, 
  /* [31][0][][] */ 7,28,-10,-14,-127,6,-25,-12, 
  /* [32][0][][] */ 40,-59,-68,83,-7,-91,121,-127, 
  /* [33][0][][] */ 56,127,41,30,56,-22,-25,-19, 
  /* [34][0][][] */ -120,-30,127,-1,-25,98,99,22, 
  /* [35][0][][] */ -32,75,127,-9,-68,-66,-39,26, 
  /* [36][0][][] */ -102,10,111,-25,-18,127,79,30, 
  /* [37][0][][] */ -22,-75,-2,-127,-36,-76,75,46, 
  /* [38][0][][] */ 44,-16,85,-57,56,59,-127,9, 
  /* [39][0][][] */ -15,96,-127,-47,-21,-4,-2,85, 
  /* [40][0][][] */ 62,-50,21,32,11,2,5,127, 
  /* [41][0][][] */ -33,90,127,-5,3,74,-74,20, 
  /* [42][0][][] */ 65,-121,-124,-15,-127,6,16,-94, 
  /* [43][0][][] */ -7,-82,31,-61,127,-30,22,40, 
  /* [44][0][][] */ 8,127,120,27,-5,59,-79,11, 
  /* [45][0][][] */ -40,46,9,89,-126,70,-127,22, 
  /* [46][0][][] */ -42,-40,54,49,-127,-120,-27,-3, 
  /* [47][0][][] */ -21,64,52,-102,-127,39,-30,68, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025334947276860476, 0.0035764381755143404, 0.0032412083819508553, 0.0026516281068325043, 0.0021672630682587624, 0.0023425749968737364, 0.0022779963910579681, 0.0019400718156248331, 0.0027171839028596878, 0.0034684543497860432, 0.0022808101493865252, 0.0019822581671178341, 0.003652587067335844, 0.003552817041054368, 0.0028097978793084621, 0.0019845652859658003, 0.0027744383551180363, 0.0031559944618493319, 0.0019824081100523472, 0.0033262690994888544, 0.0033535950351506472, 0.0027245916426181793, 0.0022306069731712341, 0.0020349852275103331, 0.0026717172004282475, 0.0026932850014418364, 0.0033337424974888563, 0.0027963491156697273, 0.0012863861629739404, 0.0032908369321376085, 0.0021486049517989159, 0.001927113626152277, 0.0021868678741157055, 0.0025193304754793644, 0.0026778336614370346, 0.003104157280176878, 0.0027455533854663372, 0.0032187467440962791, 0.0025926197413355112, 0.0019850151147693396, 0.0029844590462744236, 0.0012851688079535961, 0.0014809831045567989, 0.00298866699449718, 0.0013984794495627284, 0.0027109859511256218, 0.0032013123854994774, 0.0025501071941107512, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 1142, 866, 23167, -3773, 4648, -14355, 1070, -14434, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.0096215242519975e-05, 0.00010658001701813191, 0.00016004002827685326, 0.00011596141121117398, 0.00013841901090927422, 0.00012625096132978797, 7.7519798651337624e-05, 8.2196900621056557e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-49,-25,-64,5,-16,93,88,-97,-91,-32,7,-59,-7,-66,41,-81,16,17,127,68,-32,12,93,68,74,31,8,-84,-54,-79,-61,-53,103,37,-53,35,-26,90,-8,33,1,5,-105,39,-29,-32,-83, 
  /* [1][0][][] */ -13,54,-24,-28,-71,66,-24,-47,-35,72,-20,16,56,46,-54,-3,-24,-125,75,-53,127,6,-68,27,64,-1,-84,65,34,-18,73,37,-35,-20,3,-8,1,110,-19,-27,65,41,-4,9,110,15,-34,60, 
  /* [2][0][][] */ -22,-35,114,2,93,-44,-11,29,-29,-3,-12,48,9,-45,-47,-127,-54,-103,-27,18,-104,20,-41,-36,-49,16,-1,-51,-45,9,-32,-13,-4,-5,30,0,29,-34,-49,12,41,-36,32,-45,-46,-42,-64,-52, 
  /* [3][0][][] */ 53,9,60,16,25,-33,34,71,-50,-28,39,-26,-77,67,-17,56,67,26,-43,33,-109,-75,127,-1,2,5,-58,-29,-50,66,119,-62,2,-120,-29,47,-11,-76,-17,72,-85,-61,67,-3,-98,-73,60,-13, 
  /* [4][0][][] */ 18,-18,74,-31,6,-9,3,1,-56,-6,-20,10,49,-78,41,-94,44,50,-11,-34,10,32,14,10,2,0,61,-16,28,24,-127,-15,-24,-18,5,18,52,-3,38,4,-36,-9,-69,29,-18,-100,1,20, 
  /* [5][0][][] */ 26,-47,63,28,30,21,20,4,-79,-9,-50,32,31,8,9,-49,94,73,-4,-18,82,-58,127,-85,-11,51,2,44,6,16,-33,-50,-19,-47,-36,17,45,29,66,7,-85,24,36,22,55,-20,82,0, 
  /* [6][0][][] */ -47,54,-127,89,58,16,44,23,-22,-5,61,-75,-90,-22,-29,36,-116,28,-12,94,22,51,-94,-87,-1,-21,22,80,-37,-32,-50,7,40,72,-46,-17,-8,-2,87,12,71,60,-124,-52,-33,121,-50,-32, 
  /* [7][0][][] */ 32,71,-77,14,8,56,125,72,38,74,-98,-6,-42,-2,-64,-52,30,35,124,99,85,11,127,32,102,94,-52,102,-76,33,0,-77,25,-68,-24,24,0,100,-61,78,-60,49,-8,-85,77,-21,48,-25, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0034040890168398619, 0.0045296507887542248, 0.0068017011508345604, 0.0049283597618341446, 0.0058828080072999001, 0.0053656655363738537, 0.0032945913262665272, 0.0034933681599795818, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -955, 11448, -255, -881, 810, -1347, 2179, -1010, -4423, -42, -5279, -145, -90, -697, -2427, 4025, 8348, 2747, -191, -4160, -5924, 332, 15023, -4363, 0, -305, 2348, -5734, 627, 646, -9025, 9613, 5748, -306, 2699, -86, 32, -246, 9285, -588, 5419, -2220, 3665, 6406, 497, 9288, -20, 2424, };
const TfArray<48, float> quant28_scale = { 48, { 0.00027645769296213984, 0.00014343074872158468, 0.00072303018532693386, 0.00024940140428952873, 0.00025564929819665849, 0.0002881336840800941, 0.00023109139874577522, 0.00031313579529523849, 9.2090034740976989e-05, 0.00030142581090331078, 0.00021855527302250266, 0.0015292749740183353, 0.00046003705938346684, 0.00086253805784508586, 0.00040754725341685116, 0.00067098438739776611, 0.000144246980198659, 6.4272964664269239e-05, 0.00027254578890278935, 0.00030730789876542985, 0.00027436530217528343, 0.00024840154219418764, 9.9139651865698397e-05, 0.00045624174526892602, 0.0001755370176397264, 0.00038082452374510467, 0.0004810566024389118, 0.00021566667419392616, 0.00023233069805428386, 0.00043386334436945617, 0.00013556676276493818, 0.00011436287604738027, 0.00014130890485830605, 0.00020254544506315142, 0.00018023750453721732, 0.00035622212453745306, 0.0025737627875059843, 0.00038987118750810623, 0.00014247353828977793, 0.00019098648044746369, 0.00018148205708712339, 0.00013493759615812451, 0.00028497475432232022, 0.00017766286327969283, 0.00037310938932932913, 8.6116451711859554e-05, 6.1373408243525773e-05, 0.00020091993792448193, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 14,-45,8,7,-17,-97,-37,52,-36,-1,-12,10,46,-4,-9,4,96,16,29,4,-8,-32,-70,22,-10,-18,7,-38,-71,72,0,-116,49,-5,-43,-59,-13,-34,8,-17,-18,47,5,-5,-19,65,127,-32, -127,-93,-24,127,-70,77,-95,127,34,19,4,-5,49,19,-1,-41,-34,61,30,9,11,124,10,127,127,-35,-40,47,70,-127,4,-83,65,-3,-29,-127,20,16,-55,-52,-124,-10,-93,-127,32,62,60,107, -14,-9,11,10,-30,36,33,52,9,-35,-4,4,-20,-2,-3,2,-58,31,-68,-23,-10,-35,127,23,-59,6,17,2,9,35,23,9,-7,-5,-26,83,5,2,19,83,34,-27,26,-36,-14,35,-18,-18, 
  /* [0][1][][] */ -7,-21,-28,1,31,-109,127,-83,-9,12,16,38,127,18,2,-32,-25,-32,37,41,51,-68,45,11,-71,127,-72,-29,127,-97,40,-127,-45,3,-64,11,9,-61,-43,7,127,127,7,-126,-74,-61,-12,69, 101,-127,127,3,127,65,-69,-56,38,127,127,-127,-97,127,127,127,127,127,125,127,127,127,1,-1,115,-106,-127,127,41,127,127,-6,-127,127,127,125,-127,127,-127,-126,50,36,-127,-40,127,-127,-12,76, 24,29,-40,-2,-55,127,-119,87,116,-72,12,63,-35,10,12,-65,18,3,-127,18,15,-118,-40,-4,69,-14,-18,126,-87,-41,22,-39,-31,23,95,-19,37,-7,0,-80,122,-1,28,36,-64,89,107,-84, 
  /* [0][2][][] */ 1,13,5,-27,1,-67,-14,-12,-1,-1,-4,5,-16,-10,-2,-1,-52,21,19,-39,-5,-24,92,-13,-124,1,55,-33,7,-1,8,30,-12,-12,-63,31,2,-12,19,49,-33,-6,6,9,-24,19,-17,0, 44,-25,-36,-31,28,33,115,-100,127,-31,-1,8,-76,-15,-19,-64,-20,120,5,25,14,41,-21,-36,-88,58,94,-15,-102,12,-23,-14,-28,-5,-41,3,54,-22,9,127,-126,-5,-14,52,32,59,6,-127, -4,22,4,-17,-14,6,-7,-44,-30,-18,-11,6,20,-11,-12,14,50,42,-32,-16,-7,-29,-52,-16,17,-25,34,-21,-22,0,-1,13,21,-10,-27,-50,-5,3,33,22,-13,-17,3,3,-22,16,66,-59, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.011749451979994774, 0.0060958066023886204, 0.030728783458471298, 0.010599559172987938, 0.010865095071494579, 0.012245681136846542, 0.0098213842138648033, 0.013308270834386349, 0.0039138263091444969, 0.012810596264898777, 0.0092885987833142281, 0.064994186162948608, 0.019551575183868408, 0.036657866090536118, 0.017320757731795311, 0.02851683646440506, 0.0061304965056478977, 0.0027316010091453791, 0.011583195999264717, 0.013060585595667362, 0.011660524643957615, 0.010557064786553383, 0.0042134351097047329, 0.019390273839235306, 0.0074603231623768806, 0.016185041517019272, 0.020444905385375023, 0.0091658337041735649, 0.0098740542307496071, 0.018439192324876785, 0.0057615870609879494, 0.004860422108322382, 0.0060056280344724655, 0.0086081810295581818, 0.00766009371727705, 0.015139440074563026, 0.10938491672277451, 0.016569525003433228, 0.0060551250353455544, 0.0081169251352548599, 0.0077129872515797615, 0.0057348478585481644, 0.012111427262425423, 0.0075506716966629028, 0.015857148915529251, 0.0036599491722881794, 0.0026083698030561209, 0.0085390973836183548, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2561, 4492, 11997, 1480, 2321, -1844, 4220, 12597, 3150, -867, 3375, -2085, 16384, -1694, 1987, 17950, -367, 1996, 210, 2759, 3412, 3388, 631, 41733, 6304, 3717, 13742, 1538, 4908, 6781, 649, 1166, 1064, 1818, -480, 204, -2288, -486, 2202, 2500, 4487, 2549, 3533, 4636, 5940, 3491, 1768, 6839, };
const TfArray<48, float> quant30_scale = { 48, { 0.00022720189008396119, 0.00018400639237370342, 8.0032354162540287e-05, 0.0001774322590790689, 0.00020807373221032321, 0.00022162588720675558, 0.0001872257562354207, 7.5164760346524417e-05, 0.00018953971448354423, 0.00022707208700012416, 0.00023811517166905105, 0.00022586177510675043, 5.9591664467006922e-05, 0.00025495959562249482, 0.00023588484327774495, 5.9616031649056822e-05, 0.00030374911148101091, 0.00021741894306614995, 0.0002609834773465991, 0.00023034750483930111, 0.00020412089361343533, 0.00021275368635542691, 0.0003108528908342123, 2.7147210857947357e-05, 0.00013450327969621867, 0.00015607583918608725, 7.2609887865837663e-05, 0.00026026583509519696, 0.00015975313726812601, 0.0001157717706519179, 0.00044235517270863056, 0.00038275882252492011, 0.0002138963172910735, 0.00021325709531083703, 0.00024610155378468335, 0.00027665239758789539, 0.00024420826230198145, 0.0002717552415560931, 0.0002567367919255048, 0.00020244736515451223, 0.0001780076272552833, 0.00020436890190467238, 0.00022323890880215913, 0.00016506605606991798, 0.00012914354738313705, 0.00020708286319859326, 0.00037493667332455516, 0.00012154541036579758, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-81,-79,15,81,11,73, 
  /* [1][0][][] */ 53,-75,52,-127,-60,76,-88,-38, 
  /* [2][0][][] */ -32,127,117,50,101,7,53,9, 
  /* [3][0][][] */ 127,41,-116,80,-8,-109,-124,-52, 
  /* [4][0][][] */ -53,38,21,-68,-46,123,127,47, 
  /* [5][0][][] */ 18,81,-127,-64,46,92,31,-27, 
  /* [6][0][][] */ -14,127,56,58,61,12,11,-83, 
  /* [7][0][][] */ 127,-27,-32,20,17,-1,97,5, 
  /* [8][0][][] */ 58,127,56,87,116,69,84,-81, 
  /* [9][0][][] */ 54,117,-127,-88,18,98,11,85, 
  /* [10][0][][] */ -62,-39,24,-52,-1,-34,-53,127, 
  /* [11][0][][] */ 14,-109,-127,-21,20,-9,41,-8, 
  /* [12][0][][] */ -19,-112,-127,-35,-112,23,-72,42, 
  /* [13][0][][] */ -14,12,-93,100,-127,-22,-4,-12, 
  /* [14][0][][] */ -65,-39,-127,-9,41,-1,-12,-52, 
  /* [15][0][][] */ 24,-107,-127,10,-91,-23,-22,-16, 
  /* [16][0][][] */ 127,-69,-20,66,-83,26,32,100, 
  /* [17][0][][] */ -28,107,127,-20,-49,-11,-27,-20, 
  /* [18][0][][] */ 7,-127,38,67,-8,-67,56,-84, 
  /* [19][0][][] */ 127,-50,-57,40,-105,6,40,98, 
  /* [20][0][][] */ -29,-127,74,65,-18,-82,3,-71, 
  /* [21][0][][] */ -7,-49,-10,-32,127,4,51,22, 
  /* [22][0][][] */ -127,22,-76,52,44,59,-85,-110, 
  /* [23][0][][] */ -98,-53,81,-6,-126,127,115,-61, 
  /* [24][0][][] */ -25,49,-4,-49,-32,127,119,-2, 
  /* [25][0][][] */ -62,-118,-127,-53,-53,-13,-20,-50, 
  /* [26][0][][] */ -5,64,-13,127,-95,32,-63,-3, 
  /* [27][0][][] */ 13,-127,29,69,9,-49,6,-118, 
  /* [28][0][][] */ 31,127,49,38,101,-20,24,-61, 
  /* [29][0][][] */ 101,36,-36,-5,73,-127,-115,33, 
  /* [30][0][][] */ 27,-11,30,-127,25,-28,8,-20, 
  /* [31][0][][] */ 46,-41,5,66,-14,29,14,127, 
  /* [32][0][][] */ -84,-64,13,-66,-57,127,66,101, 
  /* [33][0][][] */ -32,46,52,-44,42,127,-127,76, 
  /* [34][0][][] */ 27,127,-70,-56,15,48,-60,72, 
  /* [35][0][][] */ 11,-127,39,63,-16,-61,35,-79, 
  /* [36][0][][] */ -17,-32,-75,-5,-127,-56,-17,18, 
  /* [37][0][][] */ -56,-127,70,81,-48,-88,-8,-53, 
  /* [38][0][][] */ -71,23,61,-74,-127,-89,-64,83, 
  /* [39][0][][] */ 73,-127,92,59,-14,-76,-19,-92, 
  /* [40][0][][] */ -12,54,20,41,-127,-11,-56,19, 
  /* [41][0][][] */ 108,127,-86,-112,56,20,0,20, 
  /* [42][0][][] */ -7,-38,-11,11,127,9,41,21, 
  /* [43][0][][] */ 127,24,86,27,-70,-26,67,108, 
  /* [44][0][][] */ 63,53,-15,19,60,-111,-127,23, 
  /* [45][0][][] */ 44,14,19,20,73,-127,-7,-50, 
  /* [46][0][][] */ 56,-41,-15,127,34,60,20,74, 
  /* [47][0][][] */ -65,-88,39,56,-39,15,127,-75, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0032525102142244577, 0.0026341448538005352, 0.0011457037180662155, 0.0025400328449904919, 0.0029786808881908655, 0.0031726870220154524, 0.0026802315842360258, 0.0010760216973721981, 0.0027133570984005928, 0.0032506519928574562, 0.0034087393432855606, 0.0032333259005099535, 0.0008530849008820951, 0.0036498757544904947, 0.0033768110442906618, 0.00085343373939394951, 0.0043483227491378784, 0.0031124623492360115, 0.003736110869795084, 0.0032975412905216217, 0.0029220941942185163, 0.0030456769745796919, 0.0044500166550278664, 0.00038862609653733671, 0.0019254826474934816, 0.0022343047894537449, 0.0010394473792985082, 0.003725837217643857, 0.0022869470994919538, 0.00165733159519732, 0.0063325385563075542, 0.0054793865419924259, 0.0030620342586189508, 0.0030528835486620665, 0.0035230687353760004, 0.0039604194462299347, 0.0034959649201482534, 0.0038903141394257545, 0.0036753171589225531, 0.0028981366194784641, 0.0025482694618403912, 0.0029256443958729506, 0.0031957782339304686, 0.0023630042560398579, 0.0018487554043531418, 0.0029644961468875408, 0.0053674085065722466, 0.0017399841453880072, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7136, 16537, -4364, 8542, -594, 4508, -11578, -19241, };
const TfArray<8, float> quant32_scale = { 8, { 0.00024326317361555994, 0.00011453610204625875, 0.00014835488400422037, 0.00014833050954621285, 0.00016604387201368809, 0.00015899239224381745, 0.00023313668498303741, 0.00013269983173813671, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -49,-4,30,15,-31,-15,9,9,-42,-4,-65,-55,-22,-68,-9,-31,48,-41,39,42,-14,32,-38,16,-2,-39,57,-14,-3,-15,19,12,83,37,40,-127,16,0,-19,-36,1,-19,47,45,37,7,29,1, 
  /* [1][0][][] */ 4,42,65,-28,-14,44,-49,-29,5,25,-22,-94,10,89,-20,58,-21,20,-25,-59,10,-84,-23,21,-75,-13,-5,-119,-27,-16,36,-59,49,81,-45,2,127,-32,4,53,-32,40,-87,-26,117,-19,-36,-26, 
  /* [2][0][][] */ -7,-18,-64,17,-4,45,27,5,-11,43,-7,29,63,-97,16,-66,37,-86,25,36,-26,54,-4,28,-21,63,-26,-69,13,7,24,-68,-46,-91,31,-32,111,24,-9,-60,0,31,77,26,127,17,18,27, 
  /* [3][0][][] */ -1,24,-68,42,10,-39,-72,-109,7,-21,-42,2,0,24,35,75,-10,19,-41,27,1,-98,28,-58,-75,-9,127,-13,-49,-2,-66,14,1,-82,9,-11,-25,-47,-28,110,-51,-37,0,18,34,6,-44,43, 
  /* [4][0][][] */ -27,-45,-5,9,31,-27,-11,-8,27,-31,58,-80,4,30,7,12,-15,-25,12,-14,-2,-55,4,-19,16,-9,40,49,30,23,-16,29,-10,-2,1,-3,-68,88,39,-28,29,-20,-22,-22,-76,13,127,12, 
  /* [5][0][][] */ 45,-21,0,17,26,-40,31,-127,25,-28,-14,117,-80,63,19,-65,-2,-90,13,4,-40,62,-36,-49,-60,73,-26,1,-24,47,-38,-35,22,53,32,-5,-43,-6,-38,-40,15,-39,-47,-6,-36,54,85,22, 
  /* [6][0][][] */ 51,-21,20,-9,-35,-17,-37,17,-41,7,-41,127,-43,-37,-4,54,9,45,15,35,35,-80,-22,19,20,38,-63,7,5,-40,12,36,5,16,-15,-1,10,1,0,-6,-10,-17,39,55,-4,-33,69,-13, 
  /* [7][0][][] */ -30,5,-7,63,36,29,6,32,24,5,71,-7,127,105,64,53,49,47,-12,8,23,-19,-85,-26,19,-3,-24,64,36,-21,-34,-17,35,4,43,-91,-72,43,41,52,-29,31,87,124,-53,-26,-104,62, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.010338684543967247, 0.0048677842132747173, 0.0063050827011466026, 0.0063040466047823429, 0.0070568644441664219, 0.0067571764811873436, 0.009908309206366539, 0.0056397425942122936, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 14936, 4586, 4295, 226, -365, -1129, -683, 33875, 560, -204, 7525, 62271, 994, 4236, -24, 11476, -2305, 13463, -140, 8029, 11176, 284, 2609, -9816, 10800, 1503, 3561, 12977, -1392, -2234, -10358, 10387, 3786, 1752, -421, 6065, -9211, 8180, 104, 20276, -895, -2012, 4254, 3350, 1496, -1244, 2635, -164, };
const TfArray<48, float> quant34_scale = { 48, { 8.4880535723641515e-05, 8.0660312960390002e-05, 0.00017363174993079156, 0.00017212885722983629, 0.00069844047538936138, 0.00014934760110918432, 0.00021802831906825304, 0.00010419731552246958, 0.00013775547267869115, 7.817678852006793e-05, 6.7054214014206082e-05, 4.78452566312626e-05, 9.1861489636357874e-05, 6.2635786889586598e-05, 0.00025691132759675384, 0.00017227906209882349, 0.00012110301031498238, 0.00033252974390052259, 0.00013167799625080079, 0.00013076473260298371, 0.00012281828094273806, 0.0004704248858615756, 0.00012894408428110182, 0.00023828522535040975, 0.00012988042726647109, 8.5938263509888202e-05, 5.6179920647991821e-05, 8.7765380158089101e-05, 0.00018552066467236727, 0.00090245174942538142, 0.00024811233743093908, 7.8867706179153174e-05, 0.00010193660273216665, 0.00014696140715386719, 0.00018653042207006365, 5.8776036894414574e-05, 8.6987638496793807e-05, 5.4186304623726755e-05, 0.0001188427340821363, 6.6773485741578043e-05, 0.00015517327119596303, 0.00014901388203725219, 7.3888455517590046e-05, 7.8845456300769001e-05, 7.4430718086659908e-05, 0.0003730763855855912, 6.5184183767996728e-05, 0.00022712486679665744, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -64,-100,-12,-23,127,-55,60,-64,-86,-80,-22,-55,113,43,68,-127,69,-27,7,-39,-71,115,-4,14,-28,100,68,-36,82,-65,16,-51,-110,-85,48,62,17,83,120,-80,-127,-12,39,73,52,-127,85,69, -75,-125,-67,47,-84,105,65,-76,-70,52,70,-121,127,88,115,-71,-77,-80,34,-58,-89,95,-56,113,-99,125,90,-122,97,-46,14,-127,-47,-87,74,122,113,118,127,-81,-120,-64,67,84,82,110,86,72, -7,-52,-61,87,-45,-21,34,-16,80,28,57,-85,20,46,-32,-7,-79,-20,35,-40,-25,19,-66,3,-82,66,15,-93,43,57,120,-67,19,17,-10,52,76,69,46,-10,-17,100,66,25,40,31,15,-109, 
  /* [0][1][][] */ -111,-93,-14,-76,-78,-73,95,-125,-127,-127,83,-82,90,55,-124,-78,127,-127,-59,-76,-85,114,-43,10,-20,97,99,-50,-103,-72,0,-47,-101,-127,-127,60,36,93,-1,-89,55,-9,80,116,82,112,125,-127, -127,-127,-127,-103,-24,127,127,-127,83,75,127,-127,107,127,69,-120,55,-89,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-6,-127,-127,-107,48,127,127,127,-16,-127,94,-94,127,127,127,0,127,104, -56,-62,-103,127,76,-41,56,-35,60,31,23,-61,13,56,78,-53,-16,-3,-12,-74,-57,12,-72,-9,-116,57,20,-93,-44,41,127,-80,-45,22,64,78,87,70,-35,-36,44,127,79,18,54,-45,26,18, 
  /* [0][2][][] */ -111,-32,21,20,-38,-30,14,-54,18,-39,19,-37,3,26,-42,-18,-77,-22,98,-40,0,42,-59,-11,-8,61,60,-12,36,59,-10,0,11,-75,-43,30,11,13,-76,-51,23,8,41,34,25,57,15,-68, -79,-47,-38,-73,96,36,57,-55,86,32,-33,-57,-2,42,-127,-76,43,6,50,-68,-33,44,-56,57,-64,69,71,-38,39,8,-16,-36,-51,-13,-66,55,30,25,-123,-83,24,-37,74,62,45,-104,25,-2, -33,-32,-43,-23,-19,-9,17,-27,-73,15,-8,-11,-9,12,37,-34,44,31,4,-60,-19,4,-9,-20,-51,25,16,-26,17,-58,59,-18,-68,34,23,42,22,23,-63,-44,4,50,21,15,22,1,10,24, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0036074225790798664, 0.0034280633553862572, 0.0073793493211269379, 0.0073154764249920845, 0.029683718457818031, 0.0063472730107605457, 0.0092662032693624496, 0.0044283857569098473, 0.0058546075597405434, 0.0033225135412067175, 0.0028498040046542883, 0.0020334233995527029, 0.0039041133131831884, 0.0026620209682732821, 0.010918730869889259, 0.0073218601755797863, 0.0051468778401613235, 0.014132513664662838, 0.0055963145568966866, 0.0055575012229382992, 0.0052197766490280628, 0.01999305747449398, 0.0054801236838102341, 0.010127121582627296, 0.0055199181661009789, 0.0036523761227726936, 0.0023876465857028961, 0.003730028634890914, 0.007884628139436245, 0.038354199379682541, 0.010544774122536182, 0.0033518774434924126, 0.0043323053978383541, 0.006245859432965517, 0.0079275425523519516, 0.0024979815352708101, 0.0036969745997339487, 0.0023029178846627474, 0.0050508161075413227, 0.0028378730639815331, 0.0065948641858994961, 0.0063330898992717266, 0.003140259301289916, 0.0033509319182485342, 0.0031633053440600634, 0.01585574634373188, 0.0027703277301043272, 0.0096528064459562302, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1390, -479, -393, 1306, 13790, 1973, -515, 4839, 1489, 1220, 285, 3531, 1276, 598, -1014, 489, 3537, 11321, 3387, -753, 1284, -1431, -95, 2029, -292, -712, 1589, -36, 4068, 22439, 2142, -47, 462, -62, 2912, 63, 499, -203, 1455, 1371, 1918, 2081, 294, -324, 628, 2639, 1560, -191, };
const TfArray<48, float> quant36_scale = { 48, { 0.00039657254819758236, 0.00040651127346791327, 0.00027258155751042068, 0.00030583605985157192, 6.9960180553607643e-05, 0.00030271880677901208, 0.00048332000733353198, 0.00018749803712125868, 0.00028080280753783882, 0.00053389032837003469, 0.00029977338272146881, 0.00024837267119437456, 0.00021128260414116085, 0.00035850491258315742, 0.00026624320889823139, 0.00029776099836453795, 0.00020420608052518219, 8.2191829278599471e-05, 0.0002248509117634967, 0.00033388493466190994, 0.00035694791586138308, 0.00017829689022619277, 0.00045416323700919747, 0.00036060778074897826, 0.00049251154996454716, 0.0007560253725387156, 0.00032037083292379975, 0.0010118134086951613, 0.00020249611407052726, 4.4838550820713863e-05, 0.00034783032606355846, 0.00072811177233234048, 0.00038349870010279119, 0.00039036973612383008, 0.0002510279300622642, 0.00030525930924341083, 0.00045144741307012737, 0.00063161191064864397, 0.00032537025981582701, 0.00046051401295699179, 0.00029760954203084111, 0.00030562950996682048, 0.00032023063977248967, 0.00044455824536271393, 0.00042476900853216648, 0.00019369868095964193, 0.0002389966684859246, 0.00030931612127460539, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -41,27,7,-21,-84,-44,-127,26, 
  /* [1][0][][] */ 87,-80,-57,-54,127,-88,97,26, 
  /* [2][0][][] */ -106,127,-44,-127,50,-28,-25,39, 
  /* [3][0][][] */ 51,23,90,1,94,111,127,-17, 
  /* [4][0][][] */ -66,-127,64,9,-54,-108,7,-36, 
  /* [5][0][][] */ 127,-32,66,76,-75,-2,5,-25, 
  /* [6][0][][] */ 24,35,127,-31,42,-40,-47,32, 
  /* [7][0][][] */ 30,10,-127,-41,-38,108,101,-80, 
  /* [8][0][][] */ -1,127,-42,15,67,111,46,59, 
  /* [9][0][][] */ -9,123,-63,97,9,-127,41,116, 
  /* [10][0][][] */ 2,-127,-6,-24,-80,-124,-56,-83, 
  /* [11][0][][] */ -127,-86,111,56,-11,-70,99,65, 
  /* [12][0][][] */ -30,45,-127,84,34,-61,-76,100, 
  /* [13][0][][] */ 94,-127,98,84,13,36,42,-60, 
  /* [14][0][][] */ -31,101,-39,-127,-22,-114,-27,-72, 
  /* [15][0][][] */ 43,112,34,-14,32,-67,94,-127, 
  /* [16][0][][] */ -123,-127,-71,96,-51,18,-18,83, 
  /* [17][0][][] */ -28,-111,-127,81,-66,74,-58,73, 
  /* [18][0][][] */ -88,-73,-56,89,7,59,-4,127, 
  /* [19][0][][] */ 65,-127,101,-122,15,-68,34,-31, 
  /* [20][0][][] */ 0,78,32,9,45,127,71,-15, 
  /* [21][0][][] */ 26,116,44,-37,40,-69,92,-127, 
  /* [22][0][][] */ 20,11,100,21,-12,127,28,-36, 
  /* [23][0][][] */ -100,-67,33,-77,88,92,-66,-127, 
  /* [24][0][][] */ -94,-92,39,-84,107,107,-43,-127, 
  /* [25][0][][] */ 127,12,-56,-15,16,36,-61,-10, 
  /* [26][0][][] */ -127,-31,-123,-29,-46,-27,21,-1, 
  /* [27][0][][] */ 82,38,-4,-66,-127,-24,90,94, 
  /* [28][0][][] */ -127,-89,9,52,-79,-115,5,-5, 
  /* [29][0][][] */ 127,106,40,-126,27,7,-67,-96, 
  /* [30][0][][] */ -90,-66,36,-75,74,81,-59,-127, 
  /* [31][0][][] */ 47,43,-4,127,3,-72,9,10, 
  /* [32][0][][] */ -24,127,-6,35,25,75,-18,48, 
  /* [33][0][][] */ -32,127,-71,26,25,-33,-21,-2, 
  /* [34][0][][] */ -127,-106,-47,101,-13,9,15,108, 
  /* [35][0][][] */ -50,127,-27,-2,72,115,62,74, 
  /* [36][0][][] */ 74,35,3,-49,-127,-28,109,116, 
  /* [37][0][][] */ -61,110,28,26,-127,104,-22,-102, 
  /* [38][0][][] */ 42,37,32,35,127,78,119,53, 
  /* [39][0][][] */ -21,-75,38,-24,7,39,-101,127, 
  /* [40][0][][] */ -63,-55,-72,127,-26,-5,11,61, 
  /* [41][0][][] */ 127,19,60,119,-49,-16,-11,-14, 
  /* [42][0][][] */ -38,13,-67,-127,57,-103,5,79, 
  /* [43][0][][] */ 22,-3,81,-5,36,127,86,10, 
  /* [44][0][][] */ -31,-24,-72,127,51,12,-43,-38, 
  /* [45][0][][] */ 72,125,121,-127,49,-63,21,-127, 
  /* [46][0][][] */ -33,-127,-43,35,-8,42,-66,123, 
  /* [47][0][][] */ 35,39,119,-1,94,127,126,-27, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0042189694941043854, 0.0043247034773230553, 0.0028998809866607189, 0.0032536617945879698, 0.00074427708750590682, 0.0032204985618591309, 0.0051418393850326538, 0.0019947132095694542, 0.0029873435851186514, 0.0056798355653882027, 0.0031891635153442621, 0.0026423330418765545, 0.0022477472666651011, 0.0038139836397022009, 0.0028324502054601908, 0.0031677547376602888, 0.0021724631078541279, 0.00087440450442954898, 0.0023920948151499033, 0.0035520619712769985, 0.0037974193692207336, 0.001896826084703207, 0.0048316526226699352, 0.003836355172097683, 0.0052396245300769806, 0.0080430377274751663, 0.0034082911442965269, 0.010764259845018387, 0.0021542713511735201, 0.00047701856237836182, 0.0037004214245826006, 0.0077460766769945621, 0.0040798820555210114, 0.0041529801674187183, 0.0026705809868872166, 0.0032475260086357594, 0.0048027602024376392, 0.0067194551229476929, 0.0034614780452102423, 0.0048992158845067024, 0.0031661433167755604, 0.0032514643389731646, 0.0034067996311932802, 0.0047294693067669868, 0.0045189396478235722, 0.0020606792531907558, 0.0025425856001675129, 0.0032906848937273026, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7463, -2867, 11598, -9835, 23943, 8013, -8963, 10950, };
const TfArray<8, float> quant38_scale = { 8, { 0.0001751028758008033, 0.00022327751503325999, 0.00017686195496935397, 0.00026863807579502463, 0.00017415340698789805, 0.00017101461708080024, 0.00017110364569816738, 0.00027966080233454704, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -8,-12,-19,-68,-24,-36,16,-23,37,8,-30,-7,108,127,-21,-102, 
  /* [1][0][][] */ 127,-60,-42,16,-45,72,-71,-43,-41,84,-35,-52,-8,3,-64,-17, 
  /* [2][0][][] */ -43,-94,45,45,51,-57,-75,-17,32,-87,28,-127,47,-23,-73,25, 
  /* [3][0][][] */ 36,14,15,16,-12,73,-51,-19,127,48,11,21,1,-15,12,25, 
  /* [4][0][][] */ -102,-39,-24,-127,-15,39,58,-123,31,-19,-50,-40,-126,34,-37,-24, 
  /* [5][0][][] */ 91,50,68,-26,44,-49,-127,-124,-18,-78,66,49,-59,52,64,-42, 
  /* [6][0][][] */ 115,44,-127,-85,28,-74,-2,-100,-45,23,-126,99,92,-94,7,74, 
  /* [7][0][][] */ -127,-2,97,-29,-61,1,0,-61,-49,60,86,-31,63,-26,30,27, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0074418722651898861, 0.0094892941415309906, 0.0075166327878832817, 0.011417117901146412, 0.0074015194550156593, 0.007268121000379324, 0.0072719044983386993, 0.011885584332048893, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 18382, -509, 79, 3300, -1028, 253, 10087, 1287, -1125, 196, -2231, 2823, 1174, -668, -213, -1010, };
const TfArray<16, float> quant40_scale = { 16, { 0.00012462909216992557, 0.00021777767688035965, 0.00015914115647319704, 0.00018018037371803075, 0.0011802733642980456, 0.00093894830206409097, 0.0001492191368015483, 0.00089720252435654402, 0.00037219061050564051, 0.0012290625600144267, 0.00029432593146339059, 0.00021880504209548235, 0.00010504601232241839, 0.0002719663898460567, 0.00021645802189595997, 0.00057495385408401489, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-7,7,1,-19,11,6,16,-7,-11,-1,-9,-4,-7,2,-3, 6,-7,4,0,14,-2,12,-26,-10,9,-3,82,-8,21,5,-3, 3,-3,-4,1,2,-14,-2,11,1,2,-3,-7,3,-4,-1,-3, 
  /* [0][1][][] */ 8,-12,2,0,127,-24,-127,-21,127,127,-1,-4,102,-25,-4,-21, -127,127,127,-5,-86,-91,-14,-102,18,-105,127,127,127,127,127,127, 19,-2,-6,-3,-9,127,6,-10,-2,-12,-6,-6,10,-4,-15,-10, 
  /* [0][2][][] */ -1,-4,2,-16,-18,16,58,7,-9,-8,-2,-2,-9,0,-7,-13, 21,-13,-1,-127,7,-16,-8,127,-5,1,0,-13,-6,-58,-9,-37, 2,-3,-2,0,1,-4,3,-2,1,2,-4,-2,2,-5,-6,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0052967360243201256, 0.0092555508017539978, 0.0067634992301464081, 0.0076576657593250275, 0.050161618739366531, 0.039905302226543427, 0.0063418131321668625, 0.038131106644868851, 0.015818100422620773, 0.052235160022974014, 0.01250885147601366, 0.0092992139980196953, 0.0044644554145634174, 0.011558571830391884, 0.0091994656249880791, 0.024435538798570633, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1241, 467, 111, 85, 66492, 50414, 3692, -3207, 6474, 336, 1270, 41, 4658, -26644, 198, 49335, };
const TfArray<16, float> quant42_scale = { 16, { 0.00022734871890861541, 0.0012921284651383758, 0.00023530864564236253, 0.00016007988597266376, 2.4827362722135149e-05, 3.5234847018728033e-05, 0.00015501359303016216, 3.1182815291685984e-05, 0.00015286043344531208, 4.3158666812814772e-05, 0.000521861482411623, 0.001133080804720521, 0.00042678619502112269, 1.7319136532023549e-05, 0.001005203346721828, 3.9674079744145274e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 103, 23, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -24, -3, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -21, -13, 
  /* [3][2][][] */ -100, -126, -42, 
  /* [4][0][][] */ 21, -58, 4, 
  /* [4][1][][] */ 19, -127, 5, 
  /* [4][2][][] */ 10, -82, -11, 
  /* [5][0][][] */ -59, 31, -2, 
  /* [5][1][][] */ -127, 35, 2, 
  /* [5][2][][] */ -82, 26, -2, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 37, 25, -19, 
  /* [7][1][][] */ 127, 66, -14, 
  /* [7][2][][] */ 41, 11, -21, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -88, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -27, 51, -13, 
  /* [9][1][][] */ -20, 127, -15, 
  /* [9][2][][] */ -11, 87, -9, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -79, 78, 5, 
  /* [13][0][][] */ 97, 37, -8, 
  /* [13][1][][] */ 127, 107, -9, 
  /* [13][2][][] */ 79, 114, 42, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -80, -19, 27, 
  /* [15][1][][] */ -126, -127, 21, 
  /* [15][2][][] */ -32, -91, -13, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.057973921298980713, 0.32949274778366089, 0.060003701597452164, 0.040820367634296417, 0.0063309771940112114, 0.0089848851785063744, 0.039528463035821915, 0.0079516172409057617, 0.038979407399892807, 0.011005459353327751, 0.13307467103004456, 0.28893560171127319, 0.10883047431707382, 0.0044163796119391918, 0.256326824426651, 0.010116890072822571, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.093997493386268616, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.069854319095611572, } };
const TfArray<1, int> quant50_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.062425956130027771, } };
const TfArray<1, int> quant53_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.084700644016265869, } };
const TfArray<1, int> quant54_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.05473574623465538, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.021957173943519592, } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant61_scale = { 1, { 0.045569751411676407, } };
const TfArray<1, int> quant61_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.073744498193264008, } };
const TfArray<1, int> quant62_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.02243221178650856, } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.035108216106891632, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.085305005311965942, } };
const TfArray<1, int> quant66_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.022306209430098534, } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.031726181507110596, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.076095029711723328, } };
const TfArray<1, int> quant69_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
